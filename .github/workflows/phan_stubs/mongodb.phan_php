<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension mongodb@1.3.1

namespace MongoDB\BSON {
final class Binary implements \MongoDB\BSON\BinaryInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // constants
    public const TYPE_GENERIC = 0;
    public const TYPE_FUNCTION = 1;
    public const TYPE_OLD_BINARY = 2;
    public const TYPE_OLD_UUID = 3;
    public const TYPE_UUID = 4;
    public const TYPE_MD5 = 5;
    public const TYPE_USER_DEFINED = 128;

    // methods
    public function __construct($data, $type) {}
    public static function __set_state(array $properties) {}
    public function __toString() {}
    public function jsonSerialize() {}
    public function serialize() {}
    public function unserialize($serialized) {}
    public function getData() {}
    public function getType() {}
}

interface BinaryInterface {

    // methods
    public abstract function getData();
    public abstract function getType();
    public abstract function __toString();
}

final class Decimal128 implements \MongoDB\BSON\Decimal128Interface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    public function __construct($value) {}
    public static function __set_state(array $properties) {}
    public function __toString() {}
    public function jsonSerialize() {}
    public function serialize() {}
    public function unserialize($serialized) {}
}

interface Decimal128Interface {

    // methods
    public abstract function __toString();
}

final class Javascript implements \MongoDB\BSON\JavascriptInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    public function __construct($javascript, $scope = NULL) {}
    public static function __set_state(array $properties) {}
    public function __toString() {}
    public function jsonSerialize() {}
    public function serialize() {}
    public function unserialize($serialized) {}
    public function getCode() {}
    public function getScope() {}
}

interface JavascriptInterface {

    // methods
    public abstract function getCode();
    public abstract function getScope();
    public abstract function __toString();
}

final class MaxKey implements \MongoDB\BSON\MaxKeyInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    public static function __set_state(array $properties) {}
    public function jsonSerialize() {}
    public function serialize() {}
    public function unserialize($serialized) {}
}

interface MaxKeyInterface {
}

final class MinKey implements \MongoDB\BSON\MinKeyInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    public static function __set_state(array $properties) {}
    public function jsonSerialize() {}
    public function serialize() {}
    public function unserialize($serialized) {}
}

interface MinKeyInterface {
}

final class ObjectId implements \MongoDB\BSON\ObjectIdInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    public function __construct($id = NULL) {}
    public function getTimestamp() {}
    public static function __set_state(array $properties) {}
    public function __toString() {}
    public function jsonSerialize() {}
    public function serialize() {}
    public function unserialize($serialized) {}
}

interface ObjectIdInterface {

    // methods
    public abstract function getTimestamp();
    public abstract function __toString();
}

interface Persistable extends \MongoDB\BSON\Unserializable, \MongoDB\BSON\Serializable, \MongoDB\BSON\Type {
}

final class Regex implements \MongoDB\BSON\RegexInterface, \MongoDB\BSON\Type, \Serializable, \JsonSerializable {

    // methods
    public function __construct($pattern, $flags) {}
    public static function __set_state(array $properties) {}
    public function __toString() {}
    public function jsonSerialize() {}
    public function serialize() {}
    public function unserialize($serialized) {}
    public function getPattern() {}
    public function getFlags() {}
}

interface RegexInterface {

    // methods
    public abstract function getFlags();
    public abstract function getPattern();
    public abstract function __toString();
}

interface Serializable extends \MongoDB\BSON\Type {

    // methods
    public abstract function bsonSerialize();
}

final class Timestamp implements \MongoDB\BSON\TimestampInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    public function __construct($increment, $timestamp) {}
    public static function __set_state(array $properties) {}
    public function __toString() {}
    public function jsonSerialize() {}
    public function serialize() {}
    public function unserialize($serialized) {}
    public function getIncrement() {}
    public function getTimestamp() {}
}

interface TimestampInterface {

    // methods
    public abstract function getIncrement();
    public abstract function getTimestamp();
    public abstract function __toString();
}

interface Type {
}

final class UTCDateTime implements \MongoDB\BSON\UTCDateTimeInterface, \JsonSerializable, \MongoDB\BSON\Type, \Serializable {

    // methods
    public function __construct($milliseconds) {}
    public static function __set_state(array $properties) {}
    public function __toString() {}
    public function jsonSerialize() {}
    public function serialize() {}
    public function unserialize($serialized) {}
    public function toDateTime() {}
}

interface UTCDateTimeInterface {

    // methods
    public abstract function toDateTime();
    public abstract function __toString();
}

interface Unserializable {

    // methods
    public abstract function bsonUnserialize(array $data);
}

function fromJSON($json) {}
function fromPHP($value) {}
function toCanonicalExtendedJSON($bson) {}
function toJSON($bson) {}
function toPHP($bson, array $typemap = NULL) {}
function toRelaxedExtendedJSON($bson) {}
}

namespace MongoDB\Driver {
final class BulkWrite implements \Countable {

    // methods
    public function __construct(array $options = NULL) {}
    public function insert($document) {}
    public function update($query, $newObj, array $updateOptions = NULL) {}
    public function delete($query, array $deleteOptions = NULL) {}
    public function count() {}
    public function __wakeup() {}
}

final class Command {

    // methods
    public function __construct($document) {}
    public function __wakeup() {}
}

final class Cursor implements \Traversable {

    // methods
    public function setTypeMap(array $typemap) {}
    public function toArray() {}
    public function getId() {}
    public function getServer() {}
    public function isDead() {}
    private function __construct() {}
    public function __wakeup() {}
}

final class CursorId {

    // methods
    public function __toString() {}
    private function __construct() {}
    public function __wakeup() {}
}

final class Manager {

    // methods
    public function __construct($uri = NULL, array $options = NULL, array $driverOptions = NULL) {}
    public function executeCommand($db, \MongoDB\Driver\Command $command, \MongoDB\Driver\ReadPreference $readPreference = NULL) {}
    public function executeQuery($namespace, \MongoDB\Driver\Query $zquery, \MongoDB\Driver\ReadPreference $readPreference = NULL) {}
    public function executeBulkWrite($namespace, \MongoDB\Driver\BulkWrite $zbulk, \MongoDB\Driver\WriteConcern $writeConcern = NULL) {}
    public function getReadConcern() {}
    public function getReadPreference() {}
    public function getServers() {}
    public function getWriteConcern() {}
    public function selectServer(\MongoDB\Driver\ReadPreference $readPreference) {}
    public function __wakeup() {}
}

final class Query {

    // methods
    public function __construct($filter, array $options = NULL) {}
    public function __wakeup() {}
}

final class ReadConcern implements \MongoDB\BSON\Serializable, \MongoDB\BSON\Type {

    // constants
    public const LOCAL = 'local';
    public const MAJORITY = 'majority';
    public const LINEARIZABLE = 'linearizable';

    // methods
    public function __construct($level = NULL) {}
    public function getLevel() {}
    public function isDefault() {}
    public function bsonSerialize() {}
}

final class ReadPreference implements \MongoDB\BSON\Serializable, \MongoDB\BSON\Type {

    // constants
    public const RP_PRIMARY = 1;
    public const RP_PRIMARY_PREFERRED = 5;
    public const RP_SECONDARY = 2;
    public const RP_SECONDARY_PREFERRED = 6;
    public const RP_NEAREST = 10;
    public const NO_MAX_STALENESS = -1;
    public const SMALLEST_MAX_STALENESS_SECONDS = 90;

    // methods
    public function __construct($mode, array $tagSets = NULL, array $options = NULL) {}
    public function getMaxStalenessSeconds() {}
    public function getMode() {}
    public function getTagSets() {}
    public function bsonSerialize() {}
}

final class Server {

    // constants
    public const TYPE_UNKNOWN = 0;
    public const TYPE_STANDALONE = 1;
    public const TYPE_MONGOS = 2;
    public const TYPE_POSSIBLE_PRIMARY = 3;
    public const TYPE_RS_PRIMARY = 4;
    public const TYPE_RS_SECONDARY = 5;
    public const TYPE_RS_ARBITER = 6;
    public const TYPE_RS_OTHER = 7;
    public const TYPE_RS_GHOST = 8;

    // methods
    public function executeCommand($db, \MongoDB\Driver\Command $command, \MongoDB\Driver\ReadPreference $readPreference = NULL) {}
    public function executeQuery($namespace, \MongoDB\Driver\Query $zquery, \MongoDB\Driver\ReadPreference $readPreference = NULL) {}
    public function executeBulkWrite($namespace, \MongoDB\Driver\BulkWrite $zbulk, \MongoDB\Driver\WriteConcern $writeConcern = NULL) {}
    public function getHost() {}
    public function getTags() {}
    public function getInfo() {}
    public function getLatency() {}
    public function getPort() {}
    public function getType() {}
    public function isPrimary() {}
    public function isSecondary() {}
    public function isArbiter() {}
    public function isHidden() {}
    public function isPassive() {}
    private function __construct() {}
    public function __wakeup() {}
}

final class WriteConcern implements \MongoDB\BSON\Serializable, \MongoDB\BSON\Type {

    // constants
    public const MAJORITY = 'majority';

    // methods
    public function __construct($w, $wtimeout = NULL, $journal = NULL) {}
    public function getW() {}
    public function getWtimeout() {}
    public function getJournal() {}
    public function isDefault() {}
    public function bsonSerialize() {}
}

final class WriteConcernError {

    // methods
    public function getCode() {}
    public function getInfo() {}
    public function getMessage() {}
    private function __construct() {}
    public function __wakeup() {}
}

final class WriteError {

    // methods
    public function getCode() {}
    public function getIndex() {}
    public function getMessage() {}
    public function getInfo() {}
    private function __construct() {}
    public function __wakeup() {}
}

final class WriteResult {

    // methods
    public function getInsertedCount() {}
    public function getMatchedCount() {}
    public function getModifiedCount() {}
    public function getDeletedCount() {}
    public function getUpsertedCount() {}
    public function getServer() {}
    public function getUpsertedIds() {}
    public function getWriteConcernError() {}
    public function getWriteErrors() {}
    public function isAcknowledged() {}
    private function __construct() {}
    public function __wakeup() {}
}

}

namespace MongoDB\Driver\Exception {
class AuthenticationException extends \MongoDB\Driver\Exception\ConnectionException {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

class BulkWriteException extends \MongoDB\Driver\Exception\WriteException {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
    public $writeResult;
}

class ConnectionException extends \MongoDB\Driver\Exception\RuntimeException {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

final class ConnectionTimeoutException extends \MongoDB\Driver\Exception\ConnectionException {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

interface Exception {
}

final class ExecutionTimeoutException extends \MongoDB\Driver\Exception\RuntimeException {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

class InvalidArgumentException extends \InvalidArgumentException implements \MongoDB\Driver\Exception\Exception {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

class LogicException extends \LogicException implements \MongoDB\Driver\Exception\Exception {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

class RuntimeException extends \RuntimeException implements \MongoDB\Driver\Exception\Exception {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

final class SSLConnectionException extends \MongoDB\Driver\Exception\ConnectionException {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

class UnexpectedValueException extends \UnexpectedValueException implements \MongoDB\Driver\Exception\Exception {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

abstract class WriteException extends \MongoDB\Driver\Exception\RuntimeException {

    // properties
    public $writeresult;
    public $message;
    public $code;
    public $file;
    public $line;
    public $writeResult;

    // methods
    public function getWriteResult() {}
}

}

namespace MongoDB\Driver\Monitoring {
final class CommandFailedEvent {

    // methods
    private function __construct() {}
    public function getCommandName() {}
    public function getError() {}
    public function getDurationMicros() {}
    public function getOperationId() {}
    public function getRequestId() {}
    public function getServer() {}
    public function __wakeup() {}
}

final class CommandStartedEvent {

    // methods
    private function __construct() {}
    public function getCommand() {}
    public function getCommandName() {}
    public function getDatabaseName() {}
    public function getOperationId() {}
    public function getRequestId() {}
    public function getServer() {}
    public function __wakeup() {}
}

interface CommandSubscriber extends \MongoDB\Driver\Monitoring\Subscriber {

    // methods
    public abstract function commandStarted(\MongoDB\Driver\Monitoring\CommandStartedEvent $event);
    public abstract function commandSucceeded(\MongoDB\Driver\Monitoring\CommandSucceededEvent $event);
    public abstract function commandFailed(\MongoDB\Driver\Monitoring\CommandFailedEvent $event);
}

final class CommandSucceededEvent {

    // methods
    private function __construct() {}
    public function getCommandName() {}
    public function getDurationMicros() {}
    public function getOperationId() {}
    public function getReply() {}
    public function getRequestId() {}
    public function getServer() {}
    public function __wakeup() {}
}

interface Subscriber {
}

function addSubscriber(\MongoDB\Driver\Monitoring\Subscriber $subscriber) {}
function removeSubscriber(\MongoDB\Driver\Monitoring\Subscriber $subscriber) {}
}

namespace {
const MONGODB_STABILITY = 'stable';
const MONGODB_VERSION = '1.3.1';
}
