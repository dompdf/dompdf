<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension FFI@8.2.9

namespace FFI {
final class CData {
}

final class CType {

    // constants
    const TYPE_VOID = 0;
    const TYPE_FLOAT = 1;
    const TYPE_DOUBLE = 2;
    const TYPE_LONGDOUBLE = 3;
    const TYPE_UINT8 = 4;
    const TYPE_SINT8 = 5;
    const TYPE_UINT16 = 6;
    const TYPE_SINT16 = 7;
    const TYPE_UINT32 = 8;
    const TYPE_SINT32 = 9;
    const TYPE_UINT64 = 10;
    const TYPE_SINT64 = 11;
    const TYPE_ENUM = 12;
    const TYPE_BOOL = 13;
    const TYPE_CHAR = 14;
    const TYPE_POINTER = 15;
    const TYPE_FUNC = 16;
    const TYPE_ARRAY = 17;
    const TYPE_STRUCT = 18;
    const ATTR_CONST = 1;
    const ATTR_INCOMPLETE_TAG = 2;
    const ATTR_VARIADIC = 4;
    const ATTR_INCOMPLETE_ARRAY = 8;
    const ATTR_VLA = 16;
    const ATTR_UNION = 32;
    const ATTR_PACKED = 64;
    const ATTR_MS_STRUCT = 128;
    const ATTR_GCC_STRUCT = 256;
    const ABI_DEFAULT = 0;
    const ABI_CDECL = 1;
    const ABI_FASTCALL = 2;
    const ABI_THISCALL = 3;
    const ABI_STDCALL = 4;
    const ABI_PASCAL = 5;
    const ABI_REGISTER = 6;
    const ABI_MS = 7;
    const ABI_SYSV = 8;
    const ABI_VECTORCALL = 9;

    // methods
    public function getName() : string {}
    public function getKind() : int {}
    public function getSize() : int {}
    public function getAlignment() : int {}
    public function getAttributes() : int {}
    public function getEnumKind() : int {}
    public function getArrayElementType() : \FFI\CType {}
    public function getArrayLength() : int {}
    public function getPointerType() : \FFI\CType {}
    public function getStructFieldNames() : array {}
    public function getStructFieldOffset(string $name) : int {}
    public function getStructFieldType(string $name) : \FFI\CType {}
    public function getFuncABI() : int {}
    public function getFuncReturnType() : \FFI\CType {}
    public function getFuncParameterCount() : int {}
    public function getFuncParameterType(int $index) : \FFI\CType {}
}

class Exception extends \Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

final class ParserException extends \FFI\Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

}

namespace {
final class FFI {

    // constants
    const __BIGGEST_ALIGNMENT__ = 16;

    // methods
    public static function cdef(string $code = '', ?string $lib = null) : \FFI {}
    public static function load(string $filename) : ?\FFI {}
    public static function scope(string $name) : \FFI {}
    public static function new(\FFI\CType|string $type, bool $owned = true, bool $persistent = false) : ?\FFI\CData {}
    public static function free(\FFI\CData &$ptr) : void {}
    public static function cast(\FFI\CType|string $type, &$ptr) : ?\FFI\CData {}
    public static function type(string $type) : ?\FFI\CType {}
    public static function typeof(\FFI\CData &$ptr) : \FFI\CType {}
    public static function arrayType(\FFI\CType $type, array $dimensions) : \FFI\CType {}
    public static function addr(\FFI\CData &$ptr) : \FFI\CData {}
    public static function sizeof(\FFI\CData|\FFI\CType &$ptr) : int {}
    public static function alignof(\FFI\CData|\FFI\CType &$ptr) : int {}
    public static function memcpy(\FFI\CData &$to, &$from, int $size) : void {}
    public static function memcmp(&$ptr1, &$ptr2, int $size) : int {}
    public static function memset(\FFI\CData &$ptr, int $value, int $size) : void {}
    public static function string(\FFI\CData &$ptr, ?int $size = null) : string {}
    public static function isNull(\FFI\CData &$ptr) : bool {}
}

}
