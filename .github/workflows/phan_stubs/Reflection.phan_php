<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension Reflection@7.4.12

namespace {
class Reflection {

    // methods
    public static function getModifierNames($modifiers) {}
    public static function export(\Reflector $reflector, $return = null) {}
}

class ReflectionClass implements \Reflector {

    // constants
    const IS_IMPLICIT_ABSTRACT = 16;
    const IS_EXPLICIT_ABSTRACT = 64;
    const IS_FINAL = 32;

    // properties
    public $name;

    // methods
    final private function __clone() {}
    public static function export($argument, $return = null) {}
    public function __construct($argument) {}
    public function __toString() {}
    public function getName() {}
    public function isInternal() {}
    public function isUserDefined() {}
    public function isAnonymous() {}
    public function isInstantiable() {}
    public function isCloneable() {}
    public function getFileName() {}
    public function getStartLine() {}
    public function getEndLine() {}
    public function getDocComment() {}
    public function getConstructor() {}
    public function hasMethod($name) {}
    public function getMethod($name) {}
    public function getMethods($filter = null) {}
    public function hasProperty($name) {}
    public function getProperty($name) {}
    public function getProperties($filter = null) {}
    public function hasConstant($name) {}
    public function getConstants() {}
    public function getReflectionConstants() {}
    public function getConstant($name) {}
    public function getReflectionConstant($name) {}
    public function getInterfaces() {}
    public function getInterfaceNames() {}
    public function isInterface() {}
    public function getTraits() {}
    public function getTraitNames() {}
    public function getTraitAliases() {}
    public function isTrait() {}
    public function isAbstract() {}
    public function isFinal() {}
    public function getModifiers() {}
    public function isInstance($object) {}
    public function newInstance($args) {}
    public function newInstanceWithoutConstructor() {}
    public function newInstanceArgs(array $args = unknown) {}
    public function getParentClass() {}
    public function isSubclassOf($class) {}
    public function getStaticProperties() {}
    public function getStaticPropertyValue($name, $default = null) {}
    public function setStaticPropertyValue($name, $value) {}
    public function getDefaultProperties() {}
    public function isIterable() {}
    public function isIterateable() {}
    public function implementsInterface($interface) {}
    public function getExtension() {}
    public function getExtensionName() {}
    public function inNamespace() {}
    public function getNamespaceName() {}
    public function getShortName() {}
}

class ReflectionClassConstant implements \Reflector {

    // properties
    public $class;
    public $name;

    // methods
    final private function __clone() {}
    public static function export($class, $name, $return = null) {}
    public function __construct($class, $name) {}
    public function __toString() {}
    public function getName() {}
    public function getValue() {}
    public function isPublic() {}
    public function isPrivate() {}
    public function isProtected() {}
    public function getModifiers() {}
    public function getDeclaringClass() {}
    public function getDocComment() {}
}

class ReflectionException extends \Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class ReflectionExtension implements \Reflector {

    // properties
    public $name;

    // methods
    final private function __clone() {}
    public static function export($name, $return = null) {}
    public function __construct($name) {}
    public function __toString() {}
    public function getName() {}
    public function getVersion() {}
    public function getFunctions() {}
    public function getConstants() {}
    public function getINIEntries() {}
    public function getClasses() {}
    public function getClassNames() {}
    public function getDependencies() {}
    public function info() {}
    public function isPersistent() {}
    public function isTemporary() {}
}

class ReflectionFunction extends \ReflectionFunctionAbstract {

    // constants
    const IS_DEPRECATED = 2048;

    // properties
    public $name;

    // methods
    public function __construct($name) {}
    public function __toString() {}
    public static function export($name, $return = null) {}
    public function isDisabled() {}
    public function invoke($args = null) {}
    public function invokeArgs(array $args) {}
    public function getClosure() {}
}

abstract class ReflectionFunctionAbstract implements \Reflector {

    // properties
    public $name;

    // methods
    final private function __clone() {}
    public function inNamespace() {}
    public function isClosure() {}
    public function isDeprecated() {}
    public function isInternal() {}
    public function isUserDefined() {}
    public function isGenerator() {}
    public function isVariadic() {}
    public function getClosureThis() {}
    public function getClosureScopeClass() {}
    public function getDocComment() {}
    public function getEndLine() {}
    public function getExtension() {}
    public function getExtensionName() {}
    public function getFileName() {}
    public function getName() {}
    public function getNamespaceName() {}
    public function getNumberOfParameters() {}
    public function getNumberOfRequiredParameters() {}
    public function getParameters() {}
    public function getShortName() {}
    public function getStartLine() {}
    public function getStaticVariables() {}
    public function returnsReference() {}
    public function hasReturnType() {}
    public function getReturnType() {}
}

class ReflectionGenerator {

    // methods
    public function __construct($generator) {}
    public function getExecutingLine() {}
    public function getExecutingFile() {}
    public function getTrace($options = null) {}
    public function getFunction() {}
    public function getThis() {}
    public function getExecutingGenerator() {}
}

class ReflectionMethod extends \ReflectionFunctionAbstract {

    // constants
    const IS_STATIC = 16;
    const IS_PUBLIC = 1;
    const IS_PROTECTED = 2;
    const IS_PRIVATE = 4;
    const IS_ABSTRACT = 64;
    const IS_FINAL = 32;

    // properties
    public $class;
    public $name;

    // methods
    public static function export($class, $name, $return = null) {}
    public function __construct($class_or_method, $name = null) {}
    public function __toString() {}
    public function isPublic() {}
    public function isPrivate() {}
    public function isProtected() {}
    public function isAbstract() {}
    public function isFinal() {}
    public function isStatic() {}
    public function isConstructor() {}
    public function isDestructor() {}
    public function getClosure($object = null) {}
    public function getModifiers() {}
    public function invoke($object, $args) {}
    public function invokeArgs($object, array $args) {}
    public function getDeclaringClass() {}
    public function getPrototype() {}
    public function setAccessible($value) {}
}

class ReflectionNamedType extends \ReflectionType {

    // methods
    public function getName() {}
}

class ReflectionObject extends \ReflectionClass {

    // constants
    const IS_IMPLICIT_ABSTRACT = 16;
    const IS_EXPLICIT_ABSTRACT = 64;
    const IS_FINAL = 32;

    // properties
    public $name;

    // methods
    public static function export($argument, $return = null) {}
    public function __construct($argument) {}
}

class ReflectionParameter implements \Reflector {

    // properties
    public $name;

    // methods
    final private function __clone() {}
    public static function export($function, $parameter, $return = null) {}
    public function __construct($function, $parameter) {}
    public function __toString() {}
    public function getName() {}
    public function isPassedByReference() {}
    public function canBePassedByValue() {}
    public function getDeclaringFunction() {}
    public function getDeclaringClass() {}
    public function getClass() {}
    public function hasType() {}
    public function getType() {}
    public function isArray() {}
    public function isCallable() {}
    public function allowsNull() {}
    public function getPosition() {}
    public function isOptional() {}
    public function isDefaultValueAvailable() {}
    public function getDefaultValue() {}
    public function isDefaultValueConstant() {}
    public function getDefaultValueConstantName() {}
    public function isVariadic() {}
}

class ReflectionProperty implements \Reflector {

    // constants
    const IS_STATIC = 16;
    const IS_PUBLIC = 1;
    const IS_PROTECTED = 2;
    const IS_PRIVATE = 4;

    // properties
    public $class;
    public $name;

    // methods
    final private function __clone() {}
    public static function export($class, $name, $return = null) {}
    public function __construct($class, $name) {}
    public function __toString() {}
    public function getName() {}
    public function getValue($object = null) {}
    public function setValue($object, $value = null) {}
    public function isInitialized($object = null) {}
    public function isPublic() {}
    public function isPrivate() {}
    public function isProtected() {}
    public function isStatic() {}
    public function isDefault() {}
    public function getModifiers() {}
    public function getDeclaringClass() {}
    public function getDocComment() {}
    public function setAccessible($visible) {}
    public function getType() {}
    public function hasType() {}
}

class ReflectionReference {

    // methods
    public static function fromArrayElement($array, $key) {}
    public function getId() {}
    private function __clone() {}
    private function __construct() {}
}

class ReflectionType {

    // methods
    final private function __clone() {}
    public function allowsNull() {}
    public function isBuiltin() {}
    public function __toString() {}
}

class ReflectionZendExtension implements \Reflector {

    // properties
    public $name;

    // methods
    final private function __clone() {}
    public static function export($name, $return = null) {}
    public function __construct($name) {}
    public function __toString() {}
    public function getName() {}
    public function getVersion() {}
    public function getAuthor() {}
    public function getURL() {}
    public function getCopyright() {}
}

interface Reflector {

    // methods
    function __toString();
}

}
