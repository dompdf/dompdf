<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension random@8.2.9

namespace Random {
class BrokenRandomEngineError extends \Random\RandomError {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

interface CryptoSafeEngine extends \Random\Engine {
}

interface Engine {

    // methods
    function generate() : string;
}

class RandomError extends \Error {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class RandomException extends \Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

final class Randomizer {

    // properties
    public $engine;

    // methods
    public function __construct(?\Random\Engine $engine = null) {}
    public function nextInt() : int {}
    public function getInt(int $min, int $max) : int {}
    public function getBytes(int $length) : string {}
    public function shuffleArray(array $array) : array {}
    public function shuffleBytes(string $bytes) : string {}
    public function pickArrayKeys(array $array, int $num) : array {}
    public function __serialize() : array {}
    public function __unserialize(array $data) : void {}
}

}

namespace Random\Engine {
final class Mt19937 implements \Random\Engine {

    // methods
    public function __construct(?int $seed = null, int $mode = \MT_RAND_MT19937) {}
    public function generate() : string {}
    public function __serialize() : array {}
    public function __unserialize(array $data) : void {}
    public function __debugInfo() : array {}
}

final class PcgOneseq128XslRr64 implements \Random\Engine {

    // methods
    public function __construct(int|null|string $seed = null) {}
    public function generate() : string {}
    public function jump(int $advance) : void {}
    public function __serialize() : array {}
    public function __unserialize(array $data) : void {}
    public function __debugInfo() : array {}
}

final class Secure implements \Random\CryptoSafeEngine, \Random\Engine {

    // methods
    public function generate() : string {}
}

final class Xoshiro256StarStar implements \Random\Engine {

    // methods
    public function __construct(int|null|string $seed = null) {}
    public function generate() : string {}
    public function jump() : void {}
    public function jumpLong() : void {}
    public function __serialize() : array {}
    public function __unserialize(array $data) : void {}
    public function __debugInfo() : array {}
}

}

namespace {
function getrandmax() : int {}
function lcg_value() : float {}
function mt_getrandmax() : int {}
function mt_rand(int $min = unknown, int $max = unknown) : int {}
function mt_srand(int $seed = unknown, int $mode = \MT_RAND_MT19937) : void {}
function rand(int $min = unknown, int $max = unknown) : int {}
function random_bytes(int $length) : string {}
function random_int(int $min, int $max) : int {}
function srand(int $seed = unknown, int $mode = \MT_RAND_MT19937) : void {}
const MT_RAND_MT19937 = 0;
const MT_RAND_PHP = 1;
}
