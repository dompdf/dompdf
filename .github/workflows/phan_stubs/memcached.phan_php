<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension memcached@3.0.3

namespace {
class Memcached {

    // constants
    public const LIBMEMCACHED_VERSION_HEX = 16777240;
    public const OPT_COMPRESSION = -1001;
    public const OPT_COMPRESSION_TYPE = -1004;
    public const OPT_PREFIX_KEY = -1002;
    public const OPT_SERIALIZER = -1003;
    public const OPT_USER_FLAGS = -1006;
    public const OPT_STORE_RETRY_COUNT = -1005;
    public const HAVE_IGBINARY = false;
    public const HAVE_JSON = false;
    public const HAVE_MSGPACK = false;
    public const HAVE_SESSION = true;
    public const HAVE_SASL = true;
    public const OPT_HASH = 2;
    public const HASH_DEFAULT = 0;
    public const HASH_MD5 = 1;
    public const HASH_CRC = 2;
    public const HASH_FNV1_64 = 3;
    public const HASH_FNV1A_64 = 4;
    public const HASH_FNV1_32 = 5;
    public const HASH_FNV1A_32 = 6;
    public const HASH_HSIEH = 7;
    public const HASH_MURMUR = 8;
    public const OPT_DISTRIBUTION = 9;
    public const DISTRIBUTION_MODULA = 0;
    public const DISTRIBUTION_CONSISTENT = 1;
    public const DISTRIBUTION_VIRTUAL_BUCKET = 6;
    public const OPT_LIBKETAMA_COMPATIBLE = 16;
    public const OPT_LIBKETAMA_HASH = 17;
    public const OPT_TCP_KEEPALIVE = 32;
    public const OPT_BUFFER_WRITES = 10;
    public const OPT_BINARY_PROTOCOL = 18;
    public const OPT_NO_BLOCK = 0;
    public const OPT_TCP_NODELAY = 1;
    public const OPT_SOCKET_SEND_SIZE = 4;
    public const OPT_SOCKET_RECV_SIZE = 5;
    public const OPT_CONNECT_TIMEOUT = 14;
    public const OPT_RETRY_TIMEOUT = 15;
    public const OPT_DEAD_TIMEOUT = 36;
    public const OPT_SEND_TIMEOUT = 19;
    public const OPT_RECV_TIMEOUT = 20;
    public const OPT_POLL_TIMEOUT = 8;
    public const OPT_CACHE_LOOKUPS = 6;
    public const OPT_SERVER_FAILURE_LIMIT = 21;
    public const OPT_AUTO_EJECT_HOSTS = 28;
    public const OPT_HASH_WITH_PREFIX_KEY = 25;
    public const OPT_NOREPLY = 26;
    public const OPT_SORT_HOSTS = 12;
    public const OPT_VERIFY_KEY = 13;
    public const OPT_USE_UDP = 27;
    public const OPT_NUMBER_OF_REPLICAS = 29;
    public const OPT_RANDOMIZE_REPLICA_READ = 30;
    public const OPT_REMOVE_FAILED_SERVERS = 35;
    public const OPT_SERVER_TIMEOUT_LIMIT = 37;
    public const RES_SUCCESS = 0;
    public const RES_FAILURE = 1;
    public const RES_HOST_LOOKUP_FAILURE = 2;
    public const RES_UNKNOWN_READ_FAILURE = 7;
    public const RES_PROTOCOL_ERROR = 8;
    public const RES_CLIENT_ERROR = 9;
    public const RES_SERVER_ERROR = 10;
    public const RES_WRITE_FAILURE = 5;
    public const RES_DATA_EXISTS = 12;
    public const RES_NOTSTORED = 14;
    public const RES_NOTFOUND = 16;
    public const RES_PARTIAL_READ = 18;
    public const RES_SOME_ERRORS = 19;
    public const RES_NO_SERVERS = 20;
    public const RES_END = 21;
    public const RES_ERRNO = 26;
    public const RES_BUFFERED = 32;
    public const RES_TIMEOUT = 31;
    public const RES_BAD_KEY_PROVIDED = 33;
    public const RES_STORED = 15;
    public const RES_DELETED = 22;
    public const RES_STAT = 24;
    public const RES_ITEM = 25;
    public const RES_NOT_SUPPORTED = 28;
    public const RES_FETCH_NOTFINISHED = 30;
    public const RES_SERVER_MARKED_DEAD = 35;
    public const RES_UNKNOWN_STAT_KEY = 36;
    public const RES_INVALID_HOST_PROTOCOL = 34;
    public const RES_MEMORY_ALLOCATION_FAILURE = 17;
    public const RES_CONNECTION_SOCKET_CREATE_FAILURE = 11;
    public const RES_E2BIG = 37;
    public const RES_KEY_TOO_BIG = 39;
    public const RES_SERVER_TEMPORARILY_DISABLED = 47;
    public const RES_SERVER_MEMORY_ALLOCATION_FAILURE = 48;
    public const RES_AUTH_PROBLEM = 40;
    public const RES_AUTH_FAILURE = 41;
    public const RES_AUTH_CONTINUE = 42;
    public const RES_PAYLOAD_FAILURE = -1001;
    public const SERIALIZER_PHP = 1;
    public const SERIALIZER_IGBINARY = 2;
    public const SERIALIZER_JSON = 3;
    public const SERIALIZER_JSON_ARRAY = 4;
    public const SERIALIZER_MSGPACK = 5;
    public const COMPRESSION_FASTLZ = 2;
    public const COMPRESSION_ZLIB = 1;
    public const GET_PRESERVE_ORDER = 1;
    public const GET_EXTENDED = 2;
    public const GET_ERROR_RETURN_VALUE = false;

    // methods
    public function __construct($persistent_id = NULL, $callback = NULL) {}
    public function getResultCode() {}
    public function getResultMessage() {}
    public function get($key, $cache_cb = NULL, $get_flags = NULL) {}
    public function getByKey($server_key, $key, $cache_cb = NULL, $get_flags = NULL) {}
    public function getMulti(array $keys, $get_flags = NULL) {}
    public function getMultiByKey($server_key, array $keys, $get_flags = NULL) {}
    public function getDelayed(array $keys, $with_cas = NULL, $value_cb = NULL) {}
    public function getDelayedByKey($server_key, array $keys, $with_cas = NULL, $value_cb = NULL) {}
    public function fetch() {}
    public function fetchAll() {}
    public function set($key, $value, $expiration = NULL) {}
    public function setByKey($server_key, $key, $value, $expiration = NULL) {}
    public function touch($key, $expiration) {}
    public function touchByKey($server_key, $key, $expiration) {}
    public function setMulti(array $items, $expiration = NULL) {}
    public function setMultiByKey($server_key, array $items, $expiration = NULL) {}
    public function cas($cas_token, $key, $value, $expiration = NULL) {}
    public function casByKey($cas_token, $server_key, $key, $value, $expiration = NULL) {}
    public function add($key, $value, $expiration = NULL) {}
    public function addByKey($server_key, $key, $value, $expiration = NULL) {}
    public function append($key, $value, $expiration = NULL) {}
    public function appendByKey($server_key, $key, $value, $expiration = NULL) {}
    public function prepend($key, $value, $expiration = NULL) {}
    public function prependByKey($server_key, $key, $value, $expiration = NULL) {}
    public function replace($key, $value, $expiration = NULL) {}
    public function replaceByKey($server_key, $key, $value, $expiration = NULL) {}
    public function delete($key, $time = NULL) {}
    public function deleteMulti($keys, $time = NULL) {}
    public function deleteByKey($server_key, $key, $time = NULL) {}
    public function deleteMultiByKey($server_key, $keys, $time = NULL) {}
    public function increment($key, $offset = NULL, $initial_value = NULL, $expiry = NULL) {}
    public function decrement($key, $offset = NULL, $initial_value = NULL, $expiry = NULL) {}
    public function incrementByKey($server_key, $key, $offset = NULL, $initial_value = NULL, $expiry = NULL) {}
    public function decrementByKey($server_key, $key, $offset = NULL, $initial_value = NULL, $expiry = NULL) {}
    public function addServer($host, $port, $weight = NULL) {}
    public function addServers(array $servers) {}
    public function getServerList() {}
    public function getServerByKey($server_key) {}
    public function resetServerList() {}
    public function quit() {}
    public function flushBuffers() {}
    public function getLastErrorMessage() {}
    public function getLastErrorCode() {}
    public function getLastErrorErrno() {}
    public function getLastDisconnectedServer() {}
    public function getStats($args) {}
    public function getVersion() {}
    public function getAllKeys() {}
    public function flush($delay = NULL) {}
    public function getOption($option) {}
    public function setOption($option, $value) {}
    public function setOptions($options) {}
    public function setBucket($host_map, $forward_map, $replicas) {}
    public function setSaslAuthData($username, $password) {}
    public function isPersistent() {}
    public function isPristine() {}
}

class MemcachedException extends \RuntimeException {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

}
