<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension soap@8.2.9

namespace {
class SoapClient {

    // properties
    private $uri;
    private $style;
    private $use;
    private $location;
    private $trace;
    private $compression;
    private $sdl;
    private $typemap;
    private $httpsocket;
    private $httpurl;
    private $_login;
    private $_password;
    private $_use_digest;
    private $_digest;
    private $_proxy_host;
    private $_proxy_port;
    private $_proxy_login;
    private $_proxy_password;
    private $_exceptions;
    private $_encoding;
    private $_classmap;
    private $_features;
    private $_connection_timeout;
    private $_stream_context;
    private $_user_agent;
    private $_keep_alive;
    private $_ssl_method;
    private $_use_proxy;
    private $_cookies;
    private $__default_headers;
    private $__soap_fault;
    private $__last_request;
    private $__last_response;
    private $__last_request_headers;
    private $__last_response_headers;
    private $_soap_version;

    // methods
    public function __construct(?string $wsdl, array $options = []) {}
    public function __call(string $name, array $args) : mixed {}
    public function __soapCall(string $name, array $args, ?array $options = null, $inputHeaders = null, &$outputHeaders = null) : mixed {}
    public function __getFunctions() : ?array {}
    public function __getTypes() : ?array {}
    public function __getLastRequest() : ?string {}
    public function __getLastResponse() : ?string {}
    public function __getLastRequestHeaders() : ?string {}
    public function __getLastResponseHeaders() : ?string {}
    public function __doRequest(string $request, string $location, string $action, int $version, bool $oneWay = false) : ?string {}
    public function __setCookie(string $name, ?string $value = null) : void {}
    public function __getCookies() : array {}
    public function __setSoapHeaders($headers = null) : bool {}
    public function __setLocation(?string $location = null) : ?string {}
}

class SoapFault extends \Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
    public $faultcode;
    public $faultcodens;
    public $faultactor;
    public $detail;
    public $_name;
    public $headerfault;
    public $faultstring;

    // methods
    public function __construct(array|null|string $code, string $string, ?string $actor = null, mixed $details = null, ?string $name = null, mixed $headerFault = null) {}
    public function __toString() : string {}
}

class SoapHeader {

    // properties
    public $data;
    public $namespace;
    public $name;
    public $mustUnderstand;
    public $actor;

    // methods
    public function __construct(string $namespace, string $name, mixed $data = null, bool $mustUnderstand = false, int|null|string $actor = null) {}
}

class SoapParam {

    // properties
    public $param_name;
    public $param_data;

    // methods
    public function __construct(mixed $data, string $name) {}
}

class SoapServer {

    // properties
    private $__soap_fault;

    // methods
    public function __construct(?string $wsdl, array $options = []) {}
    public function fault(string $code, string $string, string $actor = '', mixed $details = null, string $name = '') : void {}
    public function addSoapHeader(\SoapHeader $header) : void {}
    public function setPersistence(int $mode) : void {}
    public function setClass(string $class, mixed ...$args) : void {}
    public function setObject(object $object) : void {}
    public function getFunctions() : array {}
    public function addFunction($functions) : void {}
    public function handle(?string $request = null) : void {}
}

class SoapVar {

    // properties
    public $enc_value;
    public $enc_stype;
    public $enc_ns;
    public $enc_name;
    public $enc_namens;
    public $enc_type;

    // methods
    public function __construct(mixed $data, ?int $encoding, ?string $typeName = null, ?string $typeNamespace = null, ?string $nodeName = null, ?string $nodeNamespace = null) {}
}

function is_soap_fault(mixed $object) : bool {}
function use_soap_error_handler(bool $enable = true) : bool {}
const APACHE_MAP = 200;
const SOAP_1_1 = 1;
const SOAP_1_2 = 2;
const SOAP_ACTOR_NEXT = 1;
const SOAP_ACTOR_NONE = 2;
const SOAP_ACTOR_UNLIMATERECEIVER = 3;
const SOAP_AUTHENTICATION_BASIC = 0;
const SOAP_AUTHENTICATION_DIGEST = 1;
const SOAP_COMPRESSION_ACCEPT = 32;
const SOAP_COMPRESSION_DEFLATE = 16;
const SOAP_COMPRESSION_GZIP = 0;
const SOAP_DOCUMENT = 2;
const SOAP_ENCODED = 1;
const SOAP_ENC_ARRAY = 300;
const SOAP_ENC_OBJECT = 301;
const SOAP_FUNCTIONS_ALL = 999;
const SOAP_LITERAL = 2;
const SOAP_PERSISTENCE_REQUEST = 2;
const SOAP_PERSISTENCE_SESSION = 1;
const SOAP_RPC = 1;
const SOAP_SINGLE_ELEMENT_ARRAYS = 1;
const SOAP_SSL_METHOD_SSLv2 = 1;
const SOAP_SSL_METHOD_SSLv3 = 2;
const SOAP_SSL_METHOD_SSLv23 = 3;
const SOAP_SSL_METHOD_TLS = 0;
const SOAP_USE_XSI_ARRAY_TYPE = 4;
const SOAP_WAIT_ONE_WAY_CALLS = 2;
const UNKNOWN_TYPE = 999998;
const WSDL_CACHE_BOTH = 3;
const WSDL_CACHE_DISK = 1;
const WSDL_CACHE_MEMORY = 2;
const WSDL_CACHE_NONE = 0;
const XSD_1999_NAMESPACE = 'http://www.w3.org/1999/XMLSchema';
const XSD_1999_TIMEINSTANT = 401;
const XSD_ANYTYPE = 145;
const XSD_ANYURI = 117;
const XSD_ANYXML = 147;
const XSD_BASE64BINARY = 116;
const XSD_BOOLEAN = 102;
const XSD_BYTE = 137;
const XSD_DATE = 109;
const XSD_DATETIME = 107;
const XSD_DECIMAL = 103;
const XSD_DOUBLE = 105;
const XSD_DURATION = 106;
const XSD_ENTITIES = 130;
const XSD_ENTITY = 129;
const XSD_FLOAT = 104;
const XSD_GDAY = 113;
const XSD_GMONTH = 114;
const XSD_GMONTHDAY = 112;
const XSD_GYEAR = 111;
const XSD_GYEARMONTH = 110;
const XSD_HEXBINARY = 115;
const XSD_ID = 126;
const XSD_IDREF = 127;
const XSD_IDREFS = 128;
const XSD_INT = 135;
const XSD_INTEGER = 131;
const XSD_LANGUAGE = 122;
const XSD_LONG = 134;
const XSD_NAME = 124;
const XSD_NAMESPACE = 'http://www.w3.org/2001/XMLSchema';
const XSD_NCNAME = 125;
const XSD_NEGATIVEINTEGER = 133;
const XSD_NMTOKEN = 123;
const XSD_NMTOKENS = 144;
const XSD_NONNEGATIVEINTEGER = 138;
const XSD_NONPOSITIVEINTEGER = 132;
const XSD_NORMALIZEDSTRING = 120;
const XSD_NOTATION = 119;
const XSD_POSITIVEINTEGER = 143;
const XSD_QNAME = 118;
const XSD_SHORT = 136;
const XSD_STRING = 101;
const XSD_TIME = 108;
const XSD_TOKEN = 121;
const XSD_UNSIGNEDBYTE = 142;
const XSD_UNSIGNEDINT = 140;
const XSD_UNSIGNEDLONG = 139;
const XSD_UNSIGNEDSHORT = 141;
}
