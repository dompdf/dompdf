<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension imagick@3.7.0

namespace {
class Imagick implements \Iterator, \Traversable, \Countable {

    // constants
    const COLOR_BLACK = 11;
    const COLOR_BLUE = 12;
    const COLOR_CYAN = 13;
    const COLOR_GREEN = 14;
    const COLOR_RED = 15;
    const COLOR_YELLOW = 16;
    const COLOR_MAGENTA = 17;
    const COLOR_OPACITY = 18;
    const COLOR_ALPHA = 19;
    const COLOR_FUZZ = 20;
    const IMAGICK_EXTNUM = 30700;
    const IMAGICK_EXTVER = '3.7.0';
    const QUANTUM_RANGE = 65535;
    const USE_ZEND_MM = 0;
    const COMPOSITE_DEFAULT = 40;
    const COMPOSITE_UNDEFINED = 0;
    const COMPOSITE_NO = 1;
    const COMPOSITE_ADD = 2;
    const COMPOSITE_ATOP = 3;
    const COMPOSITE_BLEND = 4;
    const COMPOSITE_BUMPMAP = 5;
    const COMPOSITE_CLEAR = 7;
    const COMPOSITE_COLORBURN = 8;
    const COMPOSITE_COLORDODGE = 9;
    const COMPOSITE_COLORIZE = 10;
    const COMPOSITE_COPYBLACK = 11;
    const COMPOSITE_COPYBLUE = 12;
    const COMPOSITE_COPY = 13;
    const COMPOSITE_COPYCYAN = 14;
    const COMPOSITE_COPYGREEN = 15;
    const COMPOSITE_COPYMAGENTA = 16;
    const COMPOSITE_COPYOPACITY = 17;
    const COMPOSITE_COPYRED = 18;
    const COMPOSITE_COPYYELLOW = 19;
    const COMPOSITE_DARKEN = 20;
    const COMPOSITE_DSTATOP = 21;
    const COMPOSITE_DST = 22;
    const COMPOSITE_DSTIN = 23;
    const COMPOSITE_DSTOUT = 24;
    const COMPOSITE_DSTOVER = 25;
    const COMPOSITE_DIFFERENCE = 26;
    const COMPOSITE_DISPLACE = 27;
    const COMPOSITE_DISSOLVE = 28;
    const COMPOSITE_EXCLUSION = 29;
    const COMPOSITE_HARDLIGHT = 30;
    const COMPOSITE_HUE = 31;
    const COMPOSITE_IN = 32;
    const COMPOSITE_LIGHTEN = 33;
    const COMPOSITE_LUMINIZE = 35;
    const COMPOSITE_MINUS = 36;
    const COMPOSITE_MODULATE = 37;
    const COMPOSITE_MULTIPLY = 38;
    const COMPOSITE_OUT = 39;
    const COMPOSITE_OVER = 40;
    const COMPOSITE_OVERLAY = 41;
    const COMPOSITE_PLUS = 42;
    const COMPOSITE_REPLACE = 43;
    const COMPOSITE_SATURATE = 44;
    const COMPOSITE_SCREEN = 45;
    const COMPOSITE_SOFTLIGHT = 46;
    const COMPOSITE_SRCATOP = 47;
    const COMPOSITE_SRC = 48;
    const COMPOSITE_SRCIN = 49;
    const COMPOSITE_SRCOUT = 50;
    const COMPOSITE_SRCOVER = 51;
    const COMPOSITE_SUBTRACT = 52;
    const COMPOSITE_THRESHOLD = 53;
    const COMPOSITE_XOR = 54;
    const COMPOSITE_CHANGEMASK = 6;
    const COMPOSITE_LINEARLIGHT = 34;
    const COMPOSITE_DIVIDE = 55;
    const COMPOSITE_DISTORT = 56;
    const COMPOSITE_BLUR = 57;
    const COMPOSITE_PEGTOPLIGHT = 58;
    const COMPOSITE_VIVIDLIGHT = 59;
    const COMPOSITE_PINLIGHT = 60;
    const COMPOSITE_LINEARDODGE = 61;
    const COMPOSITE_LINEARBURN = 62;
    const COMPOSITE_MATHEMATICS = 63;
    const COMPOSITE_MODULUSADD = 2;
    const COMPOSITE_MODULUSSUBTRACT = 52;
    const COMPOSITE_MINUSDST = 36;
    const COMPOSITE_DIVIDEDST = 55;
    const COMPOSITE_DIVIDESRC = 64;
    const COMPOSITE_MINUSSRC = 65;
    const COMPOSITE_DARKENINTENSITY = 66;
    const COMPOSITE_LIGHTENINTENSITY = 67;
    const COMPOSITE_HARDMIX = 68;
    const COMPOSITE_STEREO = 69;
    const MONTAGEMODE_FRAME = 1;
    const MONTAGEMODE_UNFRAME = 2;
    const MONTAGEMODE_CONCATENATE = 3;
    const STYLE_NORMAL = 1;
    const STYLE_ITALIC = 2;
    const STYLE_OBLIQUE = 3;
    const STYLE_ANY = 4;
    const FILTER_UNDEFINED = 0;
    const FILTER_POINT = 1;
    const FILTER_BOX = 2;
    const FILTER_TRIANGLE = 3;
    const FILTER_HERMITE = 4;
    const FILTER_HANNING = 5;
    const FILTER_HAMMING = 6;
    const FILTER_BLACKMAN = 7;
    const FILTER_GAUSSIAN = 8;
    const FILTER_QUADRATIC = 9;
    const FILTER_CUBIC = 10;
    const FILTER_CATROM = 11;
    const FILTER_MITCHELL = 12;
    const FILTER_LANCZOS = 22;
    const FILTER_BESSEL = 13;
    const FILTER_SINC = 14;
    const FILTER_KAISER = 16;
    const FILTER_WELSH = 17;
    const FILTER_PARZEN = 18;
    const FILTER_LAGRANGE = 21;
    const FILTER_SENTINEL = 31;
    const FILTER_BOHMAN = 19;
    const FILTER_BARTLETT = 20;
    const FILTER_JINC = 13;
    const FILTER_SINCFAST = 15;
    const FILTER_ROBIDOUX = 26;
    const FILTER_LANCZOSSHARP = 23;
    const FILTER_LANCZOS2 = 24;
    const FILTER_LANCZOS2SHARP = 25;
    const FILTER_ROBIDOUXSHARP = 27;
    const FILTER_COSINE = 28;
    const FILTER_SPLINE = 29;
    const FILTER_LANCZOSRADIUS = 30;
    const IMGTYPE_UNDEFINED = 0;
    const IMGTYPE_BILEVEL = 1;
    const IMGTYPE_GRAYSCALE = 2;
    const IMGTYPE_GRAYSCALEMATTE = 3;
    const IMGTYPE_PALETTE = 4;
    const IMGTYPE_PALETTEMATTE = 5;
    const IMGTYPE_TRUECOLOR = 6;
    const IMGTYPE_TRUECOLORMATTE = 7;
    const IMGTYPE_COLORSEPARATION = 8;
    const IMGTYPE_COLORSEPARATIONMATTE = 9;
    const IMGTYPE_OPTIMIZE = 10;
    const IMGTYPE_PALETTEBILEVELMATTE = 11;
    const RESOLUTION_UNDEFINED = 0;
    const RESOLUTION_PIXELSPERINCH = 1;
    const RESOLUTION_PIXELSPERCENTIMETER = 2;
    const COMPRESSION_UNDEFINED = 0;
    const COMPRESSION_NO = 1;
    const COMPRESSION_BZIP = 2;
    const COMPRESSION_FAX = 6;
    const COMPRESSION_GROUP4 = 7;
    const COMPRESSION_JPEG = 8;
    const COMPRESSION_JPEG2000 = 9;
    const COMPRESSION_LOSSLESSJPEG = 10;
    const COMPRESSION_LZW = 11;
    const COMPRESSION_RLE = 12;
    const COMPRESSION_ZIP = 13;
    const COMPRESSION_DXT1 = 3;
    const COMPRESSION_DXT3 = 4;
    const COMPRESSION_DXT5 = 5;
    const COMPRESSION_ZIPS = 14;
    const COMPRESSION_PIZ = 15;
    const COMPRESSION_PXR24 = 16;
    const COMPRESSION_B44 = 17;
    const COMPRESSION_B44A = 18;
    const COMPRESSION_LZMA = 19;
    const COMPRESSION_JBIG1 = 20;
    const COMPRESSION_JBIG2 = 21;
    const PAINT_POINT = 1;
    const PAINT_REPLACE = 2;
    const PAINT_FLOODFILL = 3;
    const PAINT_FILLTOBORDER = 4;
    const PAINT_RESET = 5;
    const GRAVITY_NORTHWEST = 1;
    const GRAVITY_NORTH = 2;
    const GRAVITY_NORTHEAST = 3;
    const GRAVITY_WEST = 4;
    const GRAVITY_CENTER = 5;
    const GRAVITY_EAST = 6;
    const GRAVITY_SOUTHWEST = 7;
    const GRAVITY_SOUTH = 8;
    const GRAVITY_SOUTHEAST = 9;
    const GRAVITY_FORGET = 0;
    const GRAVITY_STATIC = 10;
    const STRETCH_NORMAL = 1;
    const STRETCH_ULTRACONDENSED = 2;
    const STRETCH_EXTRACONDENSED = 3;
    const STRETCH_CONDENSED = 4;
    const STRETCH_SEMICONDENSED = 5;
    const STRETCH_SEMIEXPANDED = 6;
    const STRETCH_EXPANDED = 7;
    const STRETCH_EXTRAEXPANDED = 8;
    const STRETCH_ULTRAEXPANDED = 9;
    const STRETCH_ANY = 10;
    const ALIGN_UNDEFINED = 0;
    const ALIGN_LEFT = 1;
    const ALIGN_CENTER = 2;
    const ALIGN_RIGHT = 3;
    const DECORATION_NO = 1;
    const DECORATION_UNDERLINE = 2;
    const DECORATION_OVERLINE = 3;
    const DECORATION_LINETROUGH = 4;
    const DECORATION_LINETHROUGH = 4;
    const NOISE_UNIFORM = 1;
    const NOISE_GAUSSIAN = 2;
    const NOISE_MULTIPLICATIVEGAUSSIAN = 3;
    const NOISE_IMPULSE = 4;
    const NOISE_LAPLACIAN = 5;
    const NOISE_POISSON = 6;
    const NOISE_RANDOM = 7;
    const CHANNEL_UNDEFINED = 0;
    const CHANNEL_RED = 1;
    const CHANNEL_GRAY = 1;
    const CHANNEL_CYAN = 1;
    const CHANNEL_GREEN = 2;
    const CHANNEL_MAGENTA = 2;
    const CHANNEL_BLUE = 4;
    const CHANNEL_YELLOW = 4;
    const CHANNEL_ALPHA = 8;
    const CHANNEL_OPACITY = 8;
    const CHANNEL_MATTE = 8;
    const CHANNEL_BLACK = 32;
    const CHANNEL_INDEX = 32;
    const CHANNEL_ALL = 134217727;
    const CHANNEL_DEFAULT = 134217719;
    const CHANNEL_RGBA = 15;
    const CHANNEL_TRUEALPHA = 64;
    const CHANNEL_RGBS = 128;
    const CHANNEL_GRAY_CHANNELS = 128;
    const CHANNEL_SYNC = 256;
    const CHANNEL_COMPOSITES = 47;
    const METRIC_UNDEFINED = 0;
    const METRIC_ABSOLUTEERRORMETRIC = 1;
    const METRIC_MEANABSOLUTEERROR = 2;
    const METRIC_MEANERRORPERPIXELMETRIC = 3;
    const METRIC_MEANSQUAREERROR = 4;
    const METRIC_PEAKABSOLUTEERROR = 5;
    const METRIC_PEAKSIGNALTONOISERATIO = 6;
    const METRIC_ROOTMEANSQUAREDERROR = 7;
    const METRIC_NORMALIZEDCROSSCORRELATIONERRORMETRIC = 8;
    const METRIC_FUZZERROR = 9;
    const METRIC_PERCEPTUALHASH_ERROR = 255;
    const PIXEL_CHAR = 1;
    const PIXELSTORAGE_CHAR = 1;
    const PIXEL_DOUBLE = 2;
    const PIXELSTORAGE_DOUBLE = 2;
    const PIXEL_FLOAT = 3;
    const PIXELSTORAGE_FLOAT = 3;
    const PIXEL_INTEGER = 4;
    const PIXELSTORAGE_INTEGER = 4;
    const PIXEL_LONG = 5;
    const PIXELSTORAGE_LONG = 5;
    const PIXEL_QUANTUM = 6;
    const PIXELSTORAGE_QUANTUM = 6;
    const PIXEL_SHORT = 7;
    const PIXELSTORAGE_SHORT = 7;
    const EVALUATE_UNDEFINED = 0;
    const EVALUATE_ADD = 1;
    const EVALUATE_AND = 2;
    const EVALUATE_DIVIDE = 3;
    const EVALUATE_LEFTSHIFT = 4;
    const EVALUATE_MAX = 5;
    const EVALUATE_MIN = 6;
    const EVALUATE_MULTIPLY = 7;
    const EVALUATE_OR = 8;
    const EVALUATE_RIGHTSHIFT = 9;
    const EVALUATE_SET = 10;
    const EVALUATE_SUBTRACT = 11;
    const EVALUATE_XOR = 12;
    const EVALUATE_POW = 13;
    const EVALUATE_LOG = 14;
    const EVALUATE_THRESHOLD = 15;
    const EVALUATE_THRESHOLDBLACK = 16;
    const EVALUATE_THRESHOLDWHITE = 17;
    const EVALUATE_GAUSSIANNOISE = 18;
    const EVALUATE_IMPULSENOISE = 19;
    const EVALUATE_LAPLACIANNOISE = 20;
    const EVALUATE_MULTIPLICATIVENOISE = 21;
    const EVALUATE_POISSONNOISE = 22;
    const EVALUATE_UNIFORMNOISE = 23;
    const EVALUATE_COSINE = 24;
    const EVALUATE_SINE = 25;
    const EVALUATE_ADDMODULUS = 26;
    const EVALUATE_MEAN = 27;
    const EVALUATE_ABS = 28;
    const EVALUATE_EXPONENTIAL = 29;
    const EVALUATE_MEDIAN = 30;
    const EVALUATE_SUM = 31;
    const EVALUATE_ROOT_MEAN_SQUARE = 32;
    const COLORSPACE_UNDEFINED = 0;
    const COLORSPACE_RGB = 1;
    const COLORSPACE_GRAY = 2;
    const COLORSPACE_TRANSPARENT = 3;
    const COLORSPACE_OHTA = 4;
    const COLORSPACE_LAB = 5;
    const COLORSPACE_XYZ = 6;
    const COLORSPACE_YCBCR = 7;
    const COLORSPACE_YCC = 8;
    const COLORSPACE_YIQ = 9;
    const COLORSPACE_YPBPR = 10;
    const COLORSPACE_YUV = 11;
    const COLORSPACE_CMYK = 12;
    const COLORSPACE_SRGB = 13;
    const COLORSPACE_HSB = 14;
    const COLORSPACE_HSL = 15;
    const COLORSPACE_HWB = 16;
    const COLORSPACE_REC601LUMA = 17;
    const COLORSPACE_REC709LUMA = 19;
    const COLORSPACE_LOG = 21;
    const COLORSPACE_CMY = 22;
    const COLORSPACE_LUV = 23;
    const COLORSPACE_HCL = 24;
    const COLORSPACE_LCH = 25;
    const COLORSPACE_LMS = 26;
    const COLORSPACE_LCHAB = 27;
    const COLORSPACE_LCHUV = 28;
    const COLORSPACE_SCRGB = 29;
    const COLORSPACE_HSI = 30;
    const COLORSPACE_HSV = 31;
    const COLORSPACE_HCLP = 32;
    const COLORSPACE_YDBDR = 33;
    const COLORSPACE_REC601YCBCR = 18;
    const COLORSPACE_REC709YCBCR = 20;
    const COLORSPACE_XYY = 34;
    const COLORSPACE_LINEARGRAY = 35;
    const VIRTUALPIXELMETHOD_UNDEFINED = 0;
    const VIRTUALPIXELMETHOD_BACKGROUND = 1;
    const VIRTUALPIXELMETHOD_CONSTANT = 2;
    const VIRTUALPIXELMETHOD_EDGE = 4;
    const VIRTUALPIXELMETHOD_MIRROR = 5;
    const VIRTUALPIXELMETHOD_TILE = 7;
    const VIRTUALPIXELMETHOD_TRANSPARENT = 8;
    const VIRTUALPIXELMETHOD_MASK = 9;
    const VIRTUALPIXELMETHOD_BLACK = 10;
    const VIRTUALPIXELMETHOD_GRAY = 11;
    const VIRTUALPIXELMETHOD_WHITE = 12;
    const VIRTUALPIXELMETHOD_HORIZONTALTILE = 13;
    const VIRTUALPIXELMETHOD_VERTICALTILE = 14;
    const VIRTUALPIXELMETHOD_HORIZONTALTILEEDGE = 15;
    const VIRTUALPIXELMETHOD_VERTICALTILEEDGE = 16;
    const VIRTUALPIXELMETHOD_CHECKERTILE = 17;
    const VIRTUALPIXELMETHOD_DITHER = 3;
    const VIRTUALPIXELMETHOD_RANDOM = 6;
    const PREVIEW_UNDEFINED = 0;
    const PREVIEW_ROTATE = 1;
    const PREVIEW_SHEAR = 2;
    const PREVIEW_ROLL = 3;
    const PREVIEW_HUE = 4;
    const PREVIEW_SATURATION = 5;
    const PREVIEW_BRIGHTNESS = 6;
    const PREVIEW_GAMMA = 7;
    const PREVIEW_SPIFF = 8;
    const PREVIEW_DULL = 9;
    const PREVIEW_GRAYSCALE = 10;
    const PREVIEW_QUANTIZE = 11;
    const PREVIEW_DESPECKLE = 12;
    const PREVIEW_REDUCENOISE = 13;
    const PREVIEW_ADDNOISE = 14;
    const PREVIEW_SHARPEN = 15;
    const PREVIEW_BLUR = 16;
    const PREVIEW_THRESHOLD = 17;
    const PREVIEW_EDGEDETECT = 18;
    const PREVIEW_SPREAD = 19;
    const PREVIEW_SOLARIZE = 20;
    const PREVIEW_SHADE = 21;
    const PREVIEW_RAISE = 22;
    const PREVIEW_SEGMENT = 23;
    const PREVIEW_SWIRL = 24;
    const PREVIEW_IMPLODE = 25;
    const PREVIEW_WAVE = 26;
    const PREVIEW_OILPAINT = 27;
    const PREVIEW_CHARCOALDRAWING = 28;
    const PREVIEW_JPEG = 29;
    const RENDERINGINTENT_UNDEFINED = 0;
    const RENDERINGINTENT_SATURATION = 1;
    const RENDERINGINTENT_PERCEPTUAL = 2;
    const RENDERINGINTENT_ABSOLUTE = 3;
    const RENDERINGINTENT_RELATIVE = 4;
    const INTERLACE_UNDEFINED = 0;
    const INTERLACE_NO = 1;
    const INTERLACE_LINE = 2;
    const INTERLACE_PLANE = 3;
    const INTERLACE_PARTITION = 4;
    const INTERLACE_GIF = 5;
    const INTERLACE_JPEG = 6;
    const INTERLACE_PNG = 7;
    const FILLRULE_UNDEFINED = 0;
    const FILLRULE_EVENODD = 1;
    const FILLRULE_NONZERO = 2;
    const PATHUNITS_UNDEFINED = 0;
    const PATHUNITS_USERSPACE = 1;
    const PATHUNITS_USERSPACEONUSE = 2;
    const PATHUNITS_OBJECTBOUNDINGBOX = 3;
    const LINECAP_UNDEFINED = 0;
    const LINECAP_BUTT = 1;
    const LINECAP_ROUND = 2;
    const LINECAP_SQUARE = 3;
    const LINEJOIN_UNDEFINED = 0;
    const LINEJOIN_MITER = 1;
    const LINEJOIN_ROUND = 2;
    const LINEJOIN_BEVEL = 3;
    const RESOURCETYPE_UNDEFINED = 0;
    const RESOURCETYPE_AREA = 1;
    const RESOURCETYPE_DISK = 2;
    const RESOURCETYPE_FILE = 3;
    const RESOURCETYPE_MAP = 4;
    const RESOURCETYPE_MEMORY = 5;
    const RESOURCETYPE_TIME = 7;
    const RESOURCETYPE_THROTTLE = 8;
    const RESOURCETYPE_THREAD = 6;
    const RESOURCETYPE_WIDTH = 9;
    const RESOURCETYPE_HEIGHT = 10;
    const RESOURCETYPE_LISTLENGTH = 11;
    const DISPOSE_UNRECOGNIZED = 0;
    const DISPOSE_UNDEFINED = 0;
    const DISPOSE_NONE = 1;
    const DISPOSE_BACKGROUND = 2;
    const DISPOSE_PREVIOUS = 3;
    const INTERPOLATE_UNDEFINED = 0;
    const INTERPOLATE_AVERAGE = 1;
    const INTERPOLATE_BICUBIC = 2;
    const INTERPOLATE_BILINEAR = 3;
    const INTERPOLATE_FILTER = 4;
    const INTERPOLATE_INTEGER = 5;
    const INTERPOLATE_MESH = 6;
    const INTERPOLATE_NEARESTNEIGHBOR = 7;
    const INTERPOLATE_SPLINE = 8;
    const INTERPOLATE_AVERAGE_9 = 9;
    const INTERPOLATE_AVERAGE_16 = 10;
    const INTERPOLATE_BLEND = 11;
    const INTERPOLATE_BACKGROUND_COLOR = 12;
    const INTERPOLATE_CATROM = 13;
    const LAYERMETHOD_UNDEFINED = 0;
    const LAYERMETHOD_COALESCE = 1;
    const LAYERMETHOD_COMPAREANY = 2;
    const LAYERMETHOD_COMPARECLEAR = 3;
    const LAYERMETHOD_COMPAREOVERLAY = 4;
    const LAYERMETHOD_DISPOSE = 5;
    const LAYERMETHOD_OPTIMIZE = 6;
    const LAYERMETHOD_OPTIMIZEPLUS = 8;
    const LAYERMETHOD_OPTIMIZETRANS = 9;
    const LAYERMETHOD_COMPOSITE = 12;
    const LAYERMETHOD_OPTIMIZEIMAGE = 7;
    const LAYERMETHOD_REMOVEDUPS = 10;
    const LAYERMETHOD_REMOVEZERO = 11;
    const LAYERMETHOD_TRIMBOUNDS = 16;
    const ORIENTATION_UNDEFINED = 0;
    const ORIENTATION_TOPLEFT = 1;
    const ORIENTATION_TOPRIGHT = 2;
    const ORIENTATION_BOTTOMRIGHT = 3;
    const ORIENTATION_BOTTOMLEFT = 4;
    const ORIENTATION_LEFTTOP = 5;
    const ORIENTATION_RIGHTTOP = 6;
    const ORIENTATION_RIGHTBOTTOM = 7;
    const ORIENTATION_LEFTBOTTOM = 8;
    const DISTORTION_UNDEFINED = 0;
    const DISTORTION_AFFINE = 1;
    const DISTORTION_AFFINEPROJECTION = 2;
    const DISTORTION_ARC = 9;
    const DISTORTION_BILINEAR = 6;
    const DISTORTION_PERSPECTIVE = 4;
    const DISTORTION_PERSPECTIVEPROJECTION = 5;
    const DISTORTION_SCALEROTATETRANSLATE = 3;
    const DISTORTION_POLYNOMIAL = 8;
    const DISTORTION_POLAR = 10;
    const DISTORTION_DEPOLAR = 11;
    const DISTORTION_BARREL = 14;
    const DISTORTION_SHEPARDS = 16;
    const DISTORTION_SENTINEL = 18;
    const DISTORTION_BARRELINVERSE = 15;
    const DISTORTION_BILINEARFORWARD = 6;
    const DISTORTION_BILINEARREVERSE = 7;
    const DISTORTION_RESIZE = 17;
    const DISTORTION_CYLINDER2PLANE = 12;
    const DISTORTION_PLANE2CYLINDER = 13;
    const LAYERMETHOD_MERGE = 13;
    const LAYERMETHOD_FLATTEN = 14;
    const LAYERMETHOD_MOSAIC = 15;
    const ALPHACHANNEL_ACTIVATE = 1;
    const ALPHACHANNEL_RESET = 7;
    const ALPHACHANNEL_SET = 8;
    const ALPHACHANNEL_UNDEFINED = 0;
    const ALPHACHANNEL_COPY = 3;
    const ALPHACHANNEL_DEACTIVATE = 4;
    const ALPHACHANNEL_EXTRACT = 5;
    const ALPHACHANNEL_OPAQUE = 6;
    const ALPHACHANNEL_SHAPE = 9;
    const ALPHACHANNEL_TRANSPARENT = 10;
    const ALPHACHANNEL_ASSOCIATE = 13;
    const ALPHACHANNEL_DISSOCIATE = 14;
    const SPARSECOLORMETHOD_UNDEFINED = 0;
    const SPARSECOLORMETHOD_BARYCENTRIC = 1;
    const SPARSECOLORMETHOD_BILINEAR = 7;
    const SPARSECOLORMETHOD_POLYNOMIAL = 8;
    const SPARSECOLORMETHOD_SPEPARDS = 16;
    const SPARSECOLORMETHOD_VORONOI = 18;
    const SPARSECOLORMETHOD_INVERSE = 19;
    const SPARSECOLORMETHOD_MANHATTAN = 20;
    const DITHERMETHOD_UNDEFINED = 0;
    const DITHERMETHOD_NO = 1;
    const DITHERMETHOD_RIEMERSMA = 2;
    const DITHERMETHOD_FLOYDSTEINBERG = 3;
    const FUNCTION_UNDEFINED = 0;
    const FUNCTION_POLYNOMIAL = 1;
    const FUNCTION_SINUSOID = 2;
    const ALPHACHANNEL_BACKGROUND = 2;
    const FUNCTION_ARCSIN = 3;
    const FUNCTION_ARCTAN = 4;
    const ALPHACHANNEL_FLATTEN = 11;
    const ALPHACHANNEL_REMOVE = 12;
    const STATISTIC_GRADIENT = 1;
    const STATISTIC_MAXIMUM = 2;
    const STATISTIC_MEAN = 3;
    const STATISTIC_MEDIAN = 4;
    const STATISTIC_MINIMUM = 5;
    const STATISTIC_MODE = 6;
    const STATISTIC_NONPEAK = 7;
    const STATISTIC_STANDARD_DEVIATION = 8;
    const STATISTIC_ROOT_MEAN_SQUARE = 9;
    const MORPHOLOGY_CONVOLVE = 1;
    const MORPHOLOGY_CORRELATE = 2;
    const MORPHOLOGY_ERODE = 3;
    const MORPHOLOGY_DILATE = 4;
    const MORPHOLOGY_ERODE_INTENSITY = 5;
    const MORPHOLOGY_DILATE_INTENSITY = 6;
    const MORPHOLOGY_DISTANCE = 7;
    const MORPHOLOGY_OPEN = 8;
    const MORPHOLOGY_CLOSE = 9;
    const MORPHOLOGY_OPEN_INTENSITY = 10;
    const MORPHOLOGY_CLOSE_INTENSITY = 11;
    const MORPHOLOGY_SMOOTH = 12;
    const MORPHOLOGY_EDGE_IN = 13;
    const MORPHOLOGY_EDGE_OUT = 14;
    const MORPHOLOGY_EDGE = 15;
    const MORPHOLOGY_TOP_HAT = 16;
    const MORPHOLOGY_BOTTOM_HAT = 17;
    const MORPHOLOGY_HIT_AND_MISS = 18;
    const MORPHOLOGY_THINNING = 19;
    const MORPHOLOGY_THICKEN = 20;
    const MORPHOLOGY_VORONOI = 21;
    const MORPHOLOGY_ITERATIVE = 22;
    const KERNEL_UNITY = 1;
    const KERNEL_GAUSSIAN = 2;
    const KERNEL_DIFFERENCE_OF_GAUSSIANS = 3;
    const KERNEL_LAPLACIAN_OF_GAUSSIANS = 4;
    const KERNEL_BLUR = 5;
    const KERNEL_COMET = 6;
    const KERNEL_LAPLACIAN = 7;
    const KERNEL_SOBEL = 8;
    const KERNEL_FREI_CHEN = 9;
    const KERNEL_ROBERTS = 10;
    const KERNEL_PREWITT = 11;
    const KERNEL_COMPASS = 12;
    const KERNEL_KIRSCH = 13;
    const KERNEL_DIAMOND = 14;
    const KERNEL_SQUARE = 15;
    const KERNEL_RECTANGLE = 16;
    const KERNEL_OCTAGON = 17;
    const KERNEL_DISK = 18;
    const KERNEL_PLUS = 19;
    const KERNEL_CROSS = 20;
    const KERNEL_RING = 21;
    const KERNEL_PEAKS = 22;
    const KERNEL_EDGES = 23;
    const KERNEL_CORNERS = 24;
    const KERNEL_DIAGONALS = 25;
    const KERNEL_LINE_ENDS = 26;
    const KERNEL_LINE_JUNCTIONS = 27;
    const KERNEL_RIDGES = 28;
    const KERNEL_CONVEX_HULL = 29;
    const KERNEL_THIN_SE = 30;
    const KERNEL_SKELETON = 31;
    const KERNEL_CHEBYSHEV = 32;
    const KERNEL_MANHATTAN = 33;
    const KERNEL_OCTAGONAL = 34;
    const KERNEL_EUCLIDEAN = 35;
    const KERNEL_USER_DEFINED = 36;
    const KERNEL_BINOMIAL = 37;
    const DIRECTION_LEFT_TO_RIGHT = 2;
    const DIRECTION_RIGHT_TO_LEFT = 1;
    const NORMALIZE_KERNEL_NONE = 0;
    const NORMALIZE_KERNEL_VALUE = 8192;
    const NORMALIZE_KERNEL_CORRELATE = 65536;
    const NORMALIZE_KERNEL_PERCENT = 4096;

    // methods
    public function optimizeImageLayers() {}
    public function compareImageLayers($metric) {}
    public function pingImageBlob($image) {}
    public function pingImageFile($filehandle, $filename = null) {}
    public function transposeImage() {}
    public function transverseImage() {}
    public function trimImage($fuzz) {}
    public function waveImage($amplitude, $length) {}
    public function vignetteImage($black_point, $white_point, $x, $y) {}
    public function uniqueImageColors() {}
    public function getImageMatte() {}
    public function setImageMatte($matte) {}
    public function adaptiveResizeImage($columns, $rows, $bestfit = null, $legacy = null) {}
    public function sketchImage($radius, $sigma, $angle) {}
    public function shadeImage($gray, $azimuth, $elevation) {}
    public function getSizeOffset() {}
    public function setSizeOffset($columns, $rows, $offset) {}
    public function adaptiveBlurImage($radius, $sigma, $channel = null) {}
    public function contrastStretchImage($black_point, $white_point, $channel = null) {}
    public function adaptiveSharpenImage($radius, $sigma, $channel = null) {}
    public function randomThresholdImage($low, $high, $channel = null) {}
    public function roundCornersImage($x_rounding, $y_rounding, $stroke_width = null, $displace = null, $size_correction = null) {}
    public function roundCorners($x_rounding, $y_rounding, $stroke_width = null, $displace = null, $size_correction = null) {}
    public function setIteratorIndex($index) {}
    public function getIteratorIndex() {}
    public function transformImage($crop, $geometry) {}
    public function setImageOpacity($opacity) {}
    public function orderedPosterizeImage($threshold_map, $channel = null) {}
    public function polaroidImage(\ImagickDraw $settings, $angle) {}
    public function getImageProperty($name) {}
    public function setImageProperty($name, $value) {}
    public function deleteImageProperty($name) {}
    public function identifyFormat($format) {}
    public function setImageInterpolateMethod($method) {}
    public function getImageInterpolateMethod() {}
    public function linearStretchImage($black_point, $white_point) {}
    public function getImageLength() {}
    public function extentImage($width, $height, $x, $y) {}
    public function getImageOrientation() {}
    public function setImageOrientation($orientation) {}
    public function paintFloodfillImage($fill_color, $fuzz, $border_color, $x, $y, $channel = null) {}
    public function clutImage(\Imagick $lookup_table, $channel = null) {}
    public function getImageProperties($pattern = null, $include_values = null) {}
    public function getImageProfiles($pattern = null, $include_values = null) {}
    public function distortImage($distortion, $arguments, $bestfit) {}
    public function writeImageFile($filehandle, $format = null) {}
    public function writeImagesFile($filehandle, $format = null) {}
    public function resetImagePage($page) {}
    public function setImageClipMask(\Imagick $clip_mask) {}
    public function getImageClipMask() {}
    public function animateImages($x_server) {}
    public function recolorImage($matrix) {}
    public function setFont($font) {}
    public function getFont() {}
    public function setPointSize($point_size) {}
    public function getPointSize() {}
    public function mergeImageLayers($layermethod) {}
    public function setImageAlphaChannel($alphachannel) {}
    public function floodfillPaintImage($fill_color, $fuzz, $border_color, $x, $y, $invert, $channel = null) {}
    public function opaquePaintImage($target_color, $fill_color, $fuzz, $invert, $channel = null) {}
    public function transparentPaintImage($target_color, $alpha, $fuzz, $invert) {}
    public function liquidRescaleImage($width, $height, $delta_x, $rigidity) {}
    public function encipherImage($passphrase) {}
    public function decipherImage($passphrase) {}
    public function setGravity($gravity) {}
    public function getGravity() {}
    public function getImageChannelRange($channel) {}
    public function getImageAlphaChannel() {}
    public function getImageChannelDistortions(\Imagick $reference_image, $metric, $channel = null) {}
    public function setImageGravity($gravity) {}
    public function getImageGravity() {}
    public function importImagePixels($x, $y, $width, $height, $map, $pixelstorage, $pixels) {}
    public function deskewImage($threshold) {}
    public function segmentImage($colorspace, $cluster_threshold, $smooth_threshold, $verbose = null) {}
    public function sparseColorImage($sparsecolormethod, $arguments, $channel = null) {}
    public function remapImage(\Imagick $replacement, $dither_method) {}
    public function exportImagePixels($x, $y, $width, $height, $map, $pixelstorage) {}
    public function getImageChannelKurtosis($channel = null) {}
    public function functionImage($function, $parameters, $channel = null) {}
    public function transformImageColorspace($colorspace) {}
    public function haldClutImage(\Imagick $clut, $channel = null) {}
    public function autoLevelImage($channel = null) {}
    public function blueShiftImage($factor = null) {}
    public function getImageArtifact($artifact) {}
    public function setImageArtifact($artifact, $value) {}
    public function deleteImageArtifact($artifact) {}
    public function getColorspace() {}
    public function setColorspace($colorspace) {}
    public function clampImage($channel = null) {}
    public function smushImages($stack, $offset) {}
    public function __construct($files = null) {}
    public function __toString() {}
    public function count($mode = null) {}
    public function getPixelIterator() {}
    public function getPixelRegionIterator($x, $y, $columns, $rows) {}
    public function readImage($filename) {}
    public function readImages($filenames) {}
    public function readImageBlob($image, $filename = null) {}
    public function setImageFormat($format) {}
    public function scaleImage($columns, $rows, $bestfit = null, $legacy = null) {}
    public function writeImage($filename = null) {}
    public function writeImages($filename, $adjoin) {}
    public function blurImage($radius, $sigma, $channel = null) {}
    public function thumbnailImage($columns, $rows, $bestfit = null, $fill = null, $legacy = null) {}
    public function cropThumbnailImage($width, $height, $legacy = null) {}
    public function getImageFilename() {}
    public function setImageFilename($filename) {}
    public function getImageFormat() {}
    public function getImageMimeType() {}
    public function removeImage() {}
    public function destroy() {}
    public function clear() {}
    public function clone() {}
    public function getImageSize() {}
    public function getImageBlob() {}
    public function getImagesBlob() {}
    public function setFirstIterator() {}
    public function setLastIterator() {}
    public function resetIterator() {}
    public function previousImage() {}
    public function nextImage() {}
    public function hasPreviousImage() {}
    public function hasNextImage() {}
    public function setImageIndex($index) {}
    public function getImageIndex() {}
    public function commentImage($comment) {}
    public function cropImage($width, $height, $x, $y) {}
    public function labelImage($label) {}
    public function getImageGeometry() {}
    public function drawImage(\ImagickDraw $drawing) {}
    public function setImageCompressionQuality($quality) {}
    public function getImageCompressionQuality() {}
    public function setImageCompression($compression) {}
    public function getImageCompression() {}
    public function annotateImage(\ImagickDraw $settings, $x, $y, $angle, $text) {}
    public function compositeImage(\Imagick $composite_image, $composite, $x, $y, $channel = null) {}
    public function modulateImage($brightness, $saturation, $hue) {}
    public function getImageColors() {}
    public function montageImage(\ImagickDraw $settings, $tile_geometry, $thumbnail_geometry, $monatgemode, $frame) {}
    public function identifyImage($append_raw_output = null) {}
    public function thresholdImage($threshold, $channel = null) {}
    public function adaptiveThresholdImage($width, $height, $offset) {}
    public function blackThresholdImage($threshold_color) {}
    public function whiteThresholdImage($threshold_color) {}
    public function appendImages($stack) {}
    public function charcoalImage($radius, $sigma) {}
    public function normalizeImage($channel = null) {}
    public function oilPaintImage($radius) {}
    public function posterizeImage($levels, $dither) {}
    public function radialBlurImage($angle, $channel = null) {}
    public function raiseImage($width, $height, $x, $y, $raise) {}
    public function resampleImage($x_resolution, $y_resolution, $filter, $blur) {}
    public function resizeImage($columns, $rows, $filter, $blur, $bestfit = null, $legacy = null) {}
    public function rollImage($x, $y) {}
    public function rotateImage($background_color, $degrees) {}
    public function sampleImage($columns, $rows) {}
    public function solarizeImage($threshold) {}
    public function shadowImage($opacity, $sigma, $x, $y) {}
    public function setImageAttribute($key, $value) {}
    public function setImageBackgroundColor($background_color) {}
    public function setImageCompose($compose) {}
    public function setImageDelay($delay) {}
    public function setImageDepth($depth) {}
    public function setImageGamma($gamma) {}
    public function setImageIterations($iterations) {}
    public function setImageMatteColor($matte_color) {}
    public function setImagePage($width, $height, $x, $y) {}
    public function setImageProgressMonitor($filename) {}
    public function setProgressMonitor($callback) {}
    public function setImageResolution($x_resolution, $y_resolution) {}
    public function setImageScene($scene) {}
    public function setImageTicksPerSecond($ticks_per_second) {}
    public function setImageType($image_type) {}
    public function setImageUnits($units) {}
    public function sharpenImage($radius, $sigma, $channel = null) {}
    public function shaveImage($columns, $rows) {}
    public function shearImage($background_color, $x_shear, $y_shear) {}
    public function spliceImage($width, $height, $x, $y) {}
    public function pingImage($filename) {}
    public function readImageFile($filehandle, $filename = null) {}
    public function displayImage($servername) {}
    public function displayImages($servername) {}
    public function spreadImage($radius) {}
    public function swirlImage($degrees) {}
    public function stripImage() {}
    public static function queryFormats($pattern = null) {}
    public static function queryFonts($pattern = null) {}
    public function queryFontMetrics(\ImagickDraw $settings, $text, $multiline = null) {}
    public function steganoImage(\Imagick $watermark, $offset) {}
    public function addNoiseImage($noise, $channel = null) {}
    public function motionBlurImage($radius, $sigma, $angle, $channel = null) {}
    public function mosaicImages() {}
    public function morphImages($number_frames) {}
    public function minifyImage() {}
    public function affineTransformImage(\ImagickDraw $settings) {}
    public function averageImages() {}
    public function borderImage($border_color, $width, $height) {}
    public static function calculateCrop($original_width, $original_height, $desired_width, $desired_height, $legacy = null) {}
    public function chopImage($width, $height, $x, $y) {}
    public function clipImage() {}
    public function clipPathImage($pathname, $inside) {}
    public function clipImagePath($pathname, $inside) {}
    public function coalesceImages() {}
    public function colorFloodfillImage($fill_color, $fuzz, $border_color, $x, $y) {}
    public function colorizeImage($colorize_color, $opacity_color, $legacy = null) {}
    public function compareImageChannels(\Imagick $reference, $channel, $metric) {}
    public function compareImages(\Imagick $reference, $metric) {}
    public function contrastImage($sharpen) {}
    public function combineImages($colorspace) {}
    public function convolveImage($kernel, $channel = null) {}
    public function cycleColormapImage($displace) {}
    public function deconstructImages() {}
    public function despeckleImage() {}
    public function edgeImage($radius) {}
    public function embossImage($radius, $sigma) {}
    public function enhanceImage() {}
    public function equalizeImage() {}
    public function evaluateImage($evaluate, $constant, $channel = null) {}
    public function evaluateImages($evaluate) {}
    public function flattenImages() {}
    public function flipImage() {}
    public function flopImage() {}
    public function forwardFourierTransformImage($magnitude) {}
    public function frameImage($matte_color, $width, $height, $inner_bevel, $outer_bevel) {}
    public function fxImage($expression, $channel = null) {}
    public function gammaImage($gamma, $channel = null) {}
    public function gaussianBlurImage($radius, $sigma, $channel = null) {}
    public function getImageAttribute($key) {}
    public function getImageBackgroundColor() {}
    public function getImageBluePrimary() {}
    public function getImageBorderColor() {}
    public function getImageChannelDepth($channel) {}
    public function getImageChannelDistortion(\Imagick $reference, $channel, $metric) {}
    public function getImageChannelExtrema($channel) {}
    public function getImageChannelMean($channel) {}
    public function getImageChannelStatistics() {}
    public function getImageColormapColor($index) {}
    public function getImageColorspace() {}
    public function getImageCompose() {}
    public function getImageDelay() {}
    public function getImageDepth() {}
    public function getImageDistortion(\Imagick $reference, $metric) {}
    public function getImageExtrema() {}
    public function getImageDispose() {}
    public function getImageGamma() {}
    public function getImageGreenPrimary() {}
    public function getImageHeight() {}
    public function getImageHistogram() {}
    public function getImageInterlaceScheme() {}
    public function getImageIterations() {}
    public function getImageMatteColor() {}
    public function getImagePage() {}
    public function getImagePixelColor($x, $y) {}
    public function getImageProfile($name) {}
    public function getImageRedPrimary() {}
    public function getImageRenderingIntent() {}
    public function getImageResolution() {}
    public function getImageScene() {}
    public function getImageSignature() {}
    public function getImageTicksPerSecond() {}
    public function getImageType() {}
    public function getImageUnits() {}
    public function getImageVirtualPixelMethod() {}
    public function getImageWhitePoint() {}
    public function getImageWidth() {}
    public function getNumberImages() {}
    public function getImageTotalInkDensity() {}
    public function getImageRegion($width, $height, $x, $y) {}
    public function implodeImage($radius) {}
    public function inverseFourierTransformImage(\Imagick $complement, $magnitude) {}
    public function levelImage($black_point, $gamma, $white_point, $channel = null) {}
    public function magnifyImage() {}
    public function mapImage(\Imagick $map, $dither) {}
    public function matteFloodfillImage($alpha, $fuzz, $border_color, $x, $y) {}
    public function medianFilterImage($radius) {}
    public function negateImage($gray, $channel = null) {}
    public function paintOpaqueImage($target_color, $fill_color, $fuzz, $channel = null) {}
    public function paintTransparentImage($target_color, $alpha, $fuzz) {}
    public function previewImages($preview) {}
    public function profileImage($name, $profile) {}
    public function quantizeImage($number_colors, $colorspace, $tree_depth, $dither, $measure_error) {}
    public function quantizeImages($number_colors, $colorspace, $tree_depth, $dither, $measure_error) {}
    public function reduceNoiseImage($radius) {}
    public function removeImageProfile($name) {}
    public function separateImageChannel($channel) {}
    public function sepiaToneImage($threshold) {}
    public function setImageBias($bias) {}
    public function setImageBiasQuantum($bias) {}
    public function setImageBluePrimary($x, $y) {}
    public function setImageBorderColor($border_color) {}
    public function setImageChannelDepth($channel, $depth) {}
    public function setImageColormapColor($index, $color) {}
    public function setImageColorspace($colorspace) {}
    public function setImageDispose($dispose) {}
    public function setImageExtent($columns, $rows) {}
    public function setImageGreenPrimary($x, $y) {}
    public function setImageInterlaceScheme($interlace) {}
    public function setImageProfile($name, $profile) {}
    public function setImageRedPrimary($x, $y) {}
    public function setImageRenderingIntent($rendering_intent) {}
    public function setImageVirtualPixelMethod($method) {}
    public function setImageWhitePoint($x, $y) {}
    public function sigmoidalContrastImage($sharpen, $alpha, $beta, $channel = null) {}
    public function stereoImage(\Imagick $offset_image) {}
    public function textureImage(\Imagick $texture) {}
    public function tintImage($tint_color, $opacity_color, $legacy = null) {}
    public function unsharpMaskImage($radius, $sigma, $amount, $threshold, $channel = null) {}
    public function getImage() {}
    public function addImage(\Imagick $image) {}
    public function setImage(\Imagick $image) {}
    public function newImage($columns, $rows, $background_color, $format = null) {}
    public function newPseudoImage($columns, $rows, $pseudo_format) {}
    public function getCompression() {}
    public function getCompressionQuality() {}
    public static function getCopyright() {}
    public static function getConfigureOptions($pattern = null) {}
    public static function getFeatures() {}
    public function getFilename() {}
    public function getFormat() {}
    public static function getHomeURL() {}
    public function getInterlaceScheme() {}
    public function getOption($key) {}
    public static function getPackageName() {}
    public function getPage() {}
    public static function getQuantum() {}
    public static function getHdriEnabled() {}
    public static function getQuantumDepth() {}
    public static function getQuantumRange() {}
    public static function getReleaseDate() {}
    public static function getResource($type) {}
    public static function getResourceLimit($type) {}
    public function getSamplingFactors() {}
    public function getSize() {}
    public static function getVersion() {}
    public function setBackgroundColor($background_color) {}
    public function setCompression($compression) {}
    public function setCompressionQuality($quality) {}
    public function setFilename($filename) {}
    public function setFormat($format) {}
    public function setInterlaceScheme($interlace) {}
    public function setOption($key, $value) {}
    public function setPage($width, $height, $x, $y) {}
    public static function setResourceLimit($type, $limit) {}
    public function setResolution($x_resolution, $y_resolution) {}
    public function setSamplingFactors($factors) {}
    public function setSize($columns, $rows) {}
    public function setType($imgtype) {}
    public function key() {}
    public function next() {}
    public function rewind() {}
    public function valid() {}
    public function current() {}
    public function brightnessContrastImage($brightness, $contrast, $channel = null) {}
    public function colorMatrixImage($color_matrix) {}
    public function selectiveBlurImage($radius, $sigma, $threshold, $channel = null) {}
    public function rotationalBlurImage($angle, $channel = null) {}
    public function statisticImage($type, $width, $height, $channel = null) {}
    public function subimageMatch(\Imagick $image, &$offset = null, &$similarity = null, $threshold = null, $metric = null) {}
    public function similarityImage(\Imagick $image, &$offset = null, &$similarity = null, $threshold = null, $metric = null) {}
    public static function setRegistry($key, $value) {}
    public static function getRegistry($key) {}
    public static function listRegistry() {}
    public function morphology($morphology, $iterations, \ImagickKernel $kernel, $channel = null) {}
    public function filter(\ImagickKernel $kernel, $channel = null) {}
    public function setAntialias($antialias) {}
    public function getAntialias() {}
    public function colorDecisionListImage($color_correction_collection) {}
    public function optimizeImageTransparency() {}
    public function autoGammaImage($channel = null) {}
    public function autoOrient() {}
    public function autoOrientate() {}
    public function compositeImageGravity(\Imagick $image, $composite_constant, $gravity) {}
    public function localContrastImage($radius, $strength) {}
}

class ImagickDraw {

    // methods
    public function resetVectorGraphics() {}
    public function getTextKerning() {}
    public function setTextKerning($kerning) {}
    public function getTextInterwordSpacing() {}
    public function setTextInterwordSpacing($spacing) {}
    public function getTextInterlineSpacing() {}
    public function setTextInterlineSpacing($spacing) {}
    public function __construct() {}
    public function setFillColor($fill_color) {}
    public function setFillAlpha($alpha) {}
    public function setResolution($resolution_x, $resolution_y) {}
    public function setStrokeColor($color) {}
    public function setStrokeAlpha($alpha) {}
    public function setStrokeWidth($width) {}
    public function clear() {}
    public function circle($origin_x, $origin_y, $perimeter_x, $perimeter_y) {}
    public function annotation($x, $y, $text) {}
    public function setTextAntialias($antialias) {}
    public function setTextEncoding($encoding) {}
    public function setFont($font_name) {}
    public function setFontFamily($font_family) {}
    public function setFontSize($point_size) {}
    public function setFontStyle($style) {}
    public function setFontWeight($weight) {}
    public function getFont() {}
    public function getFontFamily() {}
    public function getFontSize() {}
    public function getFontStyle() {}
    public function getFontWeight() {}
    public function destroy() {}
    public function rectangle($top_left_x, $top_left_y, $bottom_right_x, $bottom_right_y) {}
    public function roundRectangle($top_left_x, $top_left_y, $bottom_right_x, $bottom_right_y, $rounding_x, $rounding_y) {}
    public function ellipse($origin_x, $origin_y, $radius_x, $radius_y, $angle_start, $angle_end) {}
    public function skewX($degrees) {}
    public function skewY($degrees) {}
    public function translate($x, $y) {}
    public function line($start_x, $start_y, $end_x, $end_y) {}
    public function arc($start_x, $start_y, $end_x, $end_y, $start_angle, $end_angle) {}
    public function matte($x, $y, $paint) {}
    public function polygon($coordinates) {}
    public function point($x, $y) {}
    public function getTextDecoration() {}
    public function getTextEncoding() {}
    public function getFontStretch() {}
    public function setFontStretch($stretch) {}
    public function setStrokeAntialias($enabled) {}
    public function setTextAlignment($align) {}
    public function setTextDecoration($decoration) {}
    public function setTextUnderColor($under_color) {}
    public function setViewbox($left_x, $top_y, $right_x, $bottom_y) {}
    public function clone() {}
    public function affine($affine) {}
    public function bezier($coordinates) {}
    public function composite($composite, $x, $y, $width, $height, \Imagick $image) {}
    public function color($x, $y, $paint) {}
    public function comment($comment) {}
    public function getClipPath() {}
    public function getClipRule() {}
    public function getClipUnits() {}
    public function getFillColor() {}
    public function getFillOpacity() {}
    public function getFillRule() {}
    public function getGravity() {}
    public function getStrokeAntialias() {}
    public function getStrokeColor() {}
    public function getStrokeDashArray() {}
    public function getStrokeDashOffset() {}
    public function getStrokeLineCap() {}
    public function getStrokeLineJoin() {}
    public function getStrokeMiterLimit() {}
    public function getStrokeOpacity() {}
    public function getStrokeWidth() {}
    public function getTextAlignment() {}
    public function getTextAntialias() {}
    public function getVectorGraphics() {}
    public function getTextUnderColor() {}
    public function pathClose() {}
    public function pathCurveToAbsolute($x1, $y1, $x2, $y2, $x, $y) {}
    public function pathCurveToRelative($x1, $y1, $x2, $y2, $x, $y) {}
    public function pathCurveToQuadraticBezierAbsolute($x1, $y1, $x_end, $y) {}
    public function pathCurveToQuadraticBezierRelative($x1, $y1, $x_end, $y) {}
    public function pathCurveToQuadraticBezierSmoothAbsolute($x, $y) {}
    public function pathCurveToQuadraticBezierSmoothRelative($x, $y) {}
    public function pathCurveToSmoothAbsolute($x2, $y2, $x, $y) {}
    public function pathCurveToSmoothRelative($x2, $y2, $x, $y) {}
    public function pathEllipticArcAbsolute($rx, $ry, $x_axis_rotation, $large_arc, $sweep, $x, $y) {}
    public function pathEllipticArcRelative($rx, $ry, $x_axis_rotation, $large_arc, $sweep, $x, $y) {}
    public function pathFinish() {}
    public function pathLineToAbsolute($x, $y) {}
    public function pathLineToRelative($x, $y) {}
    public function pathLineToHorizontalAbsolute($x) {}
    public function pathLineToHorizontalRelative($x) {}
    public function pathLineToVerticalAbsolute($y) {}
    public function pathLineToVerticalRelative($y) {}
    public function pathMoveToAbsolute($x, $y) {}
    public function pathMoveToRelative($x, $y) {}
    public function pathStart() {}
    public function polyline($coordinates) {}
    public function popClipPath() {}
    public function popDefs() {}
    public function popPattern() {}
    public function pushClipPath($clip_mask_id) {}
    public function pushDefs() {}
    public function pushPattern($pattern_id, $x, $y, $width, $height) {}
    public function render() {}
    public function rotate($degrees) {}
    public function scale($x, $y) {}
    public function setClipPath($clip_mask) {}
    public function setClipRule($fillrule) {}
    public function setClipUnits($pathunits) {}
    public function setFillOpacity($opacity) {}
    public function setFillPatternUrl($fill_url) {}
    public function setFillRule($fillrule) {}
    public function setGravity($gravity) {}
    public function setStrokePatternUrl($stroke_url) {}
    public function setStrokeDashOffset($dash_offset) {}
    public function setStrokeLineCap($linecap) {}
    public function setStrokeLineJoin($linejoin) {}
    public function setStrokeMiterLimit($miterlimit) {}
    public function setStrokeOpacity($opacity) {}
    public function setVectorGraphics($xml) {}
    public function pop() {}
    public function push() {}
    public function setStrokeDashArray($dashes) {}
    public function getOpacity() {}
    public function setOpacity($opacity) {}
    public function getFontResolution() {}
    public function setFontResolution($x, $y) {}
    public function getBorderColor() {}
    public function setBorderColor($color) {}
    public function setDensity($density) {}
    public function getDensity() {}
    public function getTextDirection() {}
    public function setTextDirection($direction) {}
}

class ImagickDrawException extends \Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class ImagickException extends \Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class ImagickKernel {

    // methods
    public function addKernel(\ImagickKernel $kernel) {}
    public function addUnityKernel($scale) {}
    public static function fromBuiltin($kernel, $shape) {}
    public static function fromMatrix($matrix, $origin) {}
    public function getMatrix() {}
    public function scale($scale, $normalize_kernel = null) {}
    public function separate() {}
}

class ImagickKernelException extends \Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class ImagickPixel {

    // methods
    public function __construct($color = null) {}
    public function clear() {}
    public function destroy() {}
    public function getColor($normalized = null) {}
    public function getColorAsString() {}
    public function getColorCount() {}
    public function getColorQuantum() {}
    public function getColorValue($color) {}
    public function getColorValueQuantum($color) {}
    public function getHSL() {}
    public function getIndex() {}
    public function isPixelSimilar($color, $fuzz) {}
    public function isPixelSimilarQuantum($color, $fuzz_quantum_range_scaled_by_square_root_of_three) {}
    public function isSimilar($color, $fuzz_quantum_range_scaled_by_square_root_of_three) {}
    public function setColor($color) {}
    public function setColorCount($color_count) {}
    public function setColorValue($color, $value) {}
    public function setColorValueQuantum($color, $value) {}
    public function setHSL($hue, $saturation, $luminosity) {}
    public function setIndex($index) {}
    public function setColorFromPixel(\ImagickPixel $pixel) {}
}

class ImagickPixelException extends \Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class ImagickPixelIterator implements \Iterator, \Traversable {

    // methods
    public function __construct(\Imagick $imagick) {}
    public function clear() {}
    public static function getPixelIterator(\Imagick $imagick) {}
    public static function getPixelRegionIterator(\Imagick $imagick, $x, $y, $columns, $rows) {}
    public function destroy() {}
    public function getCurrentIteratorRow() {}
    public function getIteratorRow() {}
    public function getNextIteratorRow() {}
    public function getPreviousIteratorRow() {}
    public function key() {}
    public function next() {}
    public function rewind() {}
    public function current() {}
    public function newPixelIterator(\Imagick $imagick) {}
    public function newPixelRegionIterator(\Imagick $imagick, $x, $y, $columns, $rows) {}
    public function resetIterator() {}
    public function setIteratorFirstRow() {}
    public function setIteratorLastRow() {}
    public function setIteratorRow($row) {}
    public function syncIterator() {}
    public function valid() {}
}

class ImagickPixelIteratorException extends \Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

}
