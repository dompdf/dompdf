<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension Core@7.1.10

namespace {
class ArgumentCountError extends \TypeError {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

class ArithmeticError extends \Error {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

interface ArrayAccess {

    // methods
    public abstract function offsetExists($offset);
    public abstract function offsetGet($offset);
    public abstract function offsetSet($offset, $value);
    public abstract function offsetUnset($offset);
}

class ClosedGeneratorException extends \Exception {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

final class Closure {

    // methods
    private function __construct() {}
    public static function bind($closure, $newthis, $newscope = NULL) {}
    public function bindTo($newthis, $newscope = NULL) {}
    public function call($newthis, ...$parameters) {}
    public static function fromCallable($callable) {}
}

class DivisionByZeroError extends \ArithmeticError {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

class Error implements \Throwable {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
    public $string;
    public $trace;
    public $previous;

    // methods
    private function __clone() {}
    public function __construct($message = NULL, $code = NULL, $previous = NULL) {}
    public function __wakeup() {}
    public function getMessage() {}
    public function getCode() {}
    public function getFile() {}
    public function getLine() {}
    public function getTrace() {}
    public function getPrevious() {}
    public function getTraceAsString() {}
    public function __toString() {}
}

class ErrorException extends \Exception {

    // properties
    public $severity;
    public $message;
    public $code;
    public $file;
    public $line;

    // methods
    public function __construct($message = NULL, $code = NULL, $severity = NULL, $filename = NULL, $lineno = NULL, $previous = NULL) {}
    public function getSeverity() {}
}

class Exception implements \Throwable {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
    public $string;
    public $trace;
    public $previous;

    // methods
    private function __clone() {}
    public function __construct($message = NULL, $code = NULL, $previous = NULL) {}
    public function __wakeup() {}
    public function getMessage() {}
    public function getCode() {}
    public function getFile() {}
    public function getLine() {}
    public function getTrace() {}
    public function getPrevious() {}
    public function getTraceAsString() {}
    public function __toString() {}
}

final class Generator implements \Iterator, \Traversable {

    // methods
    public function rewind() {}
    public function valid() {}
    public function current() {}
    public function key() {}
    public function next() {}
    public function send($value) {}
    public function throw($exception) {}
    public function getReturn() {}
    public function __wakeup() {}
}

interface Iterator extends \Traversable {

    // methods
    public abstract function current();
    public abstract function next();
    public abstract function key();
    public abstract function valid();
    public abstract function rewind();
}

interface IteratorAggregate extends \Traversable {

    // methods
    public abstract function getIterator();
}

class ParseError extends \Error {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

interface Serializable {

    // methods
    public abstract function serialize();
    public abstract function unserialize($serialized);
}

interface Throwable {

    // methods
    public abstract function getMessage();
    public abstract function getCode();
    public abstract function getFile();
    public abstract function getLine();
    public abstract function getTrace();
    public abstract function getPrevious();
    public abstract function getTraceAsString();
    public abstract function __toString();
}

interface Traversable {
}

class TypeError extends \Error {

    // properties
    public $message;
    public $code;
    public $file;
    public $line;
}

class stdClass {
}

function class_alias($user_class_name, $alias_name, $autoload = NULL) {}
function class_exists($classname, $autoload = NULL) {}
function create_function($args, $code) {}
function debug_backtrace($options = NULL, $limit = NULL) {}
function debug_print_backtrace($options = NULL, $limit = NULL) {}
function define($constant_name, $value, $case_insensitive = NULL) {}
function defined($constant_name) {}
function each(&$arr) {}
function error_reporting($new_error_level = NULL) {}
function extension_loaded($extension_name) {}
function func_get_arg($arg_num) {}
function func_get_args() {}
function func_num_args() {}
function function_exists($function_name) {}
function gc_collect_cycles() {}
function gc_disable() {}
function gc_enable() {}
function gc_enabled() {}
function gc_mem_caches() {}
function get_called_class() {}
function get_class($object = NULL) {}
function get_class_methods($class) {}
function get_class_vars($class_name) {}
function get_declared_classes() {}
function get_declared_interfaces() {}
function get_declared_traits() {}
function get_defined_constants($categorize = NULL) {}
function get_defined_functions($exclude_disabled) {}
function get_defined_vars() {}
function get_extension_funcs($extension_name) {}
function get_included_files() {}
function get_loaded_extensions($zend_extensions = NULL) {}
function get_object_vars($obj) {}
function get_parent_class($object = NULL) {}
function get_required_files() {}
function get_resource_type($res) {}
function get_resources($type = NULL) {}
function interface_exists($classname, $autoload = NULL) {}
function is_a($object, $class_name, $allow_string = NULL) {}
function is_subclass_of($object, $class_name, $allow_string = NULL) {}
function method_exists($object, $method) {}
function property_exists($object_or_class, $property_name) {}
function restore_error_handler() {}
function restore_exception_handler() {}
function set_error_handler($error_handler, $error_types = NULL) {}
function set_exception_handler($exception_handler) {}
function strcasecmp($str1, $str2) {}
function strcmp($str1, $str2) {}
function strlen($str) {}
function strncasecmp($str1, $str2, $len) {}
function strncmp($str1, $str2, $len) {}
function trait_exists($traitname, $autoload = NULL) {}
function trigger_error($message, $error_type = NULL) {}
function user_error($message, $error_type = NULL) {}
function zend_version() {}
const DEBUG_BACKTRACE_IGNORE_ARGS = 2;
const DEBUG_BACKTRACE_PROVIDE_OBJECT = 1;
const DEFAULT_INCLUDE_PATH = '.:/usr/local/lib/php';
const E_ALL = 32767;
const E_COMPILE_ERROR = 64;
const E_COMPILE_WARNING = 128;
const E_CORE_ERROR = 16;
const E_CORE_WARNING = 32;
const E_DEPRECATED = 8192;
const E_ERROR = 1;
const E_NOTICE = 8;
const E_PARSE = 4;
const E_RECOVERABLE_ERROR = 4096;
const E_STRICT = 2048;
const E_USER_DEPRECATED = 16384;
const E_USER_ERROR = 256;
const E_USER_NOTICE = 1024;
const E_USER_WARNING = 512;
const E_WARNING = 2;
const FALSE = false;
const NULL = NULL;
const PEAR_EXTENSION_DIR = '/usr/local/lib/php/extensions/no-debug-non-zts-20160303';
const PEAR_INSTALL_DIR = '/usr/local/lib/php';
const PHP_BINARY = '/usr/local/bin/php';
const PHP_BINDIR = '/usr/local/bin';
const PHP_CONFIG_FILE_PATH = '/usr/local/etc/php';
const PHP_CONFIG_FILE_SCAN_DIR = '/usr/local/etc/php/conf.d';
const PHP_DATADIR = '/usr/local/share/php';
const PHP_DEBUG = 0;
const PHP_EOL = '
';
const PHP_EXTENSION_DIR = '/usr/local/lib/php/extensions/no-debug-non-zts-20160303';
const PHP_EXTRA_VERSION = '';
const PHP_FD_SETSIZE = 1024;
const PHP_INT_MAX = 9223372036854775807;
const PHP_INT_MIN = -9223372036854775808;
const PHP_INT_SIZE = 8;
const PHP_LIBDIR = '/usr/local/lib/php';
const PHP_LOCALSTATEDIR = '/usr/local/var';
const PHP_MAJOR_VERSION = 7;
const PHP_MANDIR = '/usr/local/php/man';
const PHP_MAXPATHLEN = 4096;
const PHP_MINOR_VERSION = 1;
const PHP_OS = 'Linux';
const PHP_OUTPUT_HANDLER_CLEAN = 2;
const PHP_OUTPUT_HANDLER_CLEANABLE = 16;
const PHP_OUTPUT_HANDLER_CONT = 0;
const PHP_OUTPUT_HANDLER_DISABLED = 8192;
const PHP_OUTPUT_HANDLER_END = 8;
const PHP_OUTPUT_HANDLER_FINAL = 8;
const PHP_OUTPUT_HANDLER_FLUSH = 4;
const PHP_OUTPUT_HANDLER_FLUSHABLE = 32;
const PHP_OUTPUT_HANDLER_REMOVABLE = 64;
const PHP_OUTPUT_HANDLER_START = 1;
const PHP_OUTPUT_HANDLER_STARTED = 4096;
const PHP_OUTPUT_HANDLER_STDFLAGS = 112;
const PHP_OUTPUT_HANDLER_WRITE = 0;
const PHP_PREFIX = '/usr/local';
const PHP_RELEASE_VERSION = 10;
const PHP_SAPI = 'cli';
const PHP_SHLIB_SUFFIX = 'so';
const PHP_SYSCONFDIR = '/usr/local/etc';
const PHP_VERSION = '7.1.10';
const PHP_VERSION_ID = 70110;
const PHP_ZTS = 0;
const STDERR = NULL;
const STDIN = NULL;
const STDOUT = NULL;
const TRUE = true;
const UPLOAD_ERR_CANT_WRITE = 7;
const UPLOAD_ERR_EXTENSION = 8;
const UPLOAD_ERR_FORM_SIZE = 2;
const UPLOAD_ERR_INI_SIZE = 1;
const UPLOAD_ERR_NO_FILE = 4;
const UPLOAD_ERR_NO_TMP_DIR = 6;
const UPLOAD_ERR_OK = 0;
const UPLOAD_ERR_PARTIAL = 3;
const ZEND_DEBUG_BUILD = false;
const ZEND_THREAD_SAFE = false;
}
