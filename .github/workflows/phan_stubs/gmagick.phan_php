<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension gmagick@2.0.6RC1

namespace {
class Gmagick {

    // constants
    const COLOR_BLACK = 11;
    const COLOR_BLUE = 12;
    const COLOR_CYAN = 13;
    const COLOR_GREEN = 14;
    const COLOR_RED = 15;
    const COLOR_YELLOW = 16;
    const COLOR_MAGENTA = 17;
    const COLOR_OPACITY = 18;
    const COLOR_ALPHA = 19;
    const COLOR_FUZZ = 20;
    const GMAGICK_EXTNUM = 1;
    const COMPOSITE_DEFAULT = 1;
    const COMPOSITE_UNDEFINED = 0;
    const COMPOSITE_NO = 23;
    const COMPOSITE_ADD = 8;
    const COMPOSITE_ATOP = 4;
    const COMPOSITE_BUMPMAP = 12;
    const COMPOSITE_CLEAR = 18;
    const COMPOSITE_COLORIZE = 28;
    const COMPOSITE_COPYBLACK = 35;
    const COMPOSITE_COPYBLUE = 16;
    const COMPOSITE_COPY = 13;
    const COMPOSITE_COPYCYAN = 32;
    const COMPOSITE_COPYGREEN = 15;
    const COMPOSITE_COPYMAGENTA = 33;
    const COMPOSITE_COPYOPACITY = 17;
    const COMPOSITE_COPYRED = 14;
    const COMPOSITE_COPYYELLOW = 34;
    const COMPOSITE_DARKEN = 24;
    const COMPOSITE_DIFFERENCE = 10;
    const COMPOSITE_DISPLACE = 20;
    const COMPOSITE_DISSOLVE = 19;
    const COMPOSITE_HUE = 26;
    const COMPOSITE_IN = 2;
    const COMPOSITE_LIGHTEN = 25;
    const COMPOSITE_LUMINIZE = 29;
    const COMPOSITE_MINUS = 7;
    const COMPOSITE_MODULATE = 21;
    const COMPOSITE_MULTIPLY = 11;
    const COMPOSITE_OUT = 3;
    const COMPOSITE_OVER = 1;
    const COMPOSITE_OVERLAY = 31;
    const COMPOSITE_PLUS = 6;
    const COMPOSITE_REPLACE = 13;
    const COMPOSITE_SATURATE = 27;
    const COMPOSITE_SCREEN = 30;
    const COMPOSITE_SUBTRACT = 9;
    const COMPOSITE_THRESHOLD = 22;
    const COMPOSITE_XOR = 5;
    const MONTAGEMODE_FRAME = 1;
    const MONTAGEMODE_UNFRAME = 2;
    const MONTAGEMODE_CONCATENATE = 3;
    const STYLE_NORMAL = 0;
    const STYLE_ITALIC = 1;
    const STYLE_OBLIQUE = 2;
    const STYLE_ANY = 3;
    const FILTER_UNDEFINED = 0;
    const FILTER_POINT = 1;
    const FILTER_BOX = 2;
    const FILTER_TRIANGLE = 3;
    const FILTER_HERMITE = 4;
    const FILTER_HANNING = 5;
    const FILTER_HAMMING = 6;
    const FILTER_BLACKMAN = 7;
    const FILTER_GAUSSIAN = 8;
    const FILTER_QUADRATIC = 9;
    const FILTER_CUBIC = 10;
    const FILTER_CATROM = 11;
    const FILTER_MITCHELL = 12;
    const FILTER_LANCZOS = 13;
    const FILTER_BESSEL = 14;
    const FILTER_SINC = 15;
    const IMGTYPE_UNDEFINED = 0;
    const IMGTYPE_BILEVEL = 1;
    const IMGTYPE_GRAYSCALE = 2;
    const IMGTYPE_GRAYSCALEMATTE = 3;
    const IMGTYPE_PALETTE = 4;
    const IMGTYPE_PALETTEMATTE = 5;
    const IMGTYPE_TRUECOLOR = 6;
    const IMGTYPE_TRUECOLORMATTE = 7;
    const IMGTYPE_COLORSEPARATION = 8;
    const IMGTYPE_COLORSEPARATIONMATTE = 9;
    const IMGTYPE_OPTIMIZE = 10;
    const RESOLUTION_UNDEFINED = 0;
    const RESOLUTION_PIXELSPERINCH = 1;
    const RESOLUTION_PIXELSPERCENTIMETER = 2;
    const COMPRESSION_UNDEFINED = 0;
    const COMPRESSION_NO = 1;
    const COMPRESSION_BZIP = 2;
    const COMPRESSION_FAX = 3;
    const COMPRESSION_GROUP4 = 4;
    const COMPRESSION_JPEG = 5;
    const COMPRESSION_LOSSLESSJPEG = 6;
    const COMPRESSION_LZW = 7;
    const COMPRESSION_RLE = 8;
    const COMPRESSION_ZIP = 9;
    const INTERLACE_UNDEFINED = 0;
    const INTERLACE_NO = 1;
    const INTERLACE_NONE = 1;
    const INTERLACE_LINE = 2;
    const INTERLACE_PLANE = 3;
    const INTERLACE_PARTITION = 4;
    const PAINT_POINT = 0;
    const PAINT_REPLACE = 1;
    const PAINT_FLOODFILL = 2;
    const PAINT_FILLTOBORDER = 3;
    const PAINT_RESET = 4;
    const GRAVITY_NORTHWEST = 1;
    const GRAVITY_NORTH = 2;
    const GRAVITY_NORTHEAST = 3;
    const GRAVITY_WEST = 4;
    const GRAVITY_CENTER = 5;
    const GRAVITY_EAST = 6;
    const GRAVITY_SOUTHWEST = 7;
    const GRAVITY_SOUTH = 8;
    const GRAVITY_SOUTHEAST = 9;
    const STRETCH_NORMAL = 0;
    const STRETCH_ULTRACONDENSED = 1;
    const STRETCH_CONDENSED = 3;
    const STRETCH_SEMICONDENSED = 4;
    const STRETCH_SEMIEXPANDED = 5;
    const STRETCH_EXPANDED = 6;
    const STRETCH_EXTRAEXPANDED = 7;
    const STRETCH_ULTRAEXPANDED = 8;
    const STRETCH_ANY = 9;
    const ALIGN_UNDEFINED = 0;
    const ALIGN_LEFT = 1;
    const ALIGN_CENTER = 2;
    const ALIGN_RIGHT = 3;
    const DECORATION_NO = 0;
    const DECORATION_UNDERLINE = 1;
    const DECORATION_OVERLINE = 2;
    const DECORATION_LINETROUGH = 3;
    const NOISE_UNIFORM = 0;
    const NOISE_GAUSSIAN = 1;
    const NOISE_MULTIPLICATIVEGAUSSIAN = 2;
    const NOISE_IMPULSE = 3;
    const NOISE_LAPLACIAN = 4;
    const NOISE_POISSON = 5;
    const CHANNEL_UNDEFINED = 0;
    const CHANNEL_RED = 1;
    const CHANNEL_CYAN = 2;
    const CHANNEL_GREEN = 3;
    const CHANNEL_MAGENTA = 4;
    const CHANNEL_BLUE = 5;
    const CHANNEL_YELLOW = 6;
    const CHANNEL_OPACITY = 7;
    const CHANNEL_MATTE = 9;
    const CHANNEL_BLACK = 8;
    const CHANNEL_INDEX = 8;
    const CHANNEL_ALL = 10;
    const CHANNEL_DEFAULT = 8;
    const METRIC_UNDEFINED = 0;
    const METRIC_MEANABSOLUTEERROR = 1;
    const METRIC_MEANSQUAREERROR = 2;
    const METRIC_PEAKABSOLUTEERROR = 3;
    const METRIC_PEAKSIGNALTONOISERATIO = 4;
    const METRIC_ROOTMEANSQUAREDERROR = 5;
    const PIXEL_CHAR = 0;
    const PIXEL_DOUBLE = 5;
    const PIXEL_FLOAT = 4;
    const PIXEL_INTEGER = 2;
    const PIXEL_LONG = 3;
    const PIXEL_SHORT = 1;
    const COLORSPACE_UNDEFINED = 0;
    const COLORSPACE_RGB = 1;
    const COLORSPACE_GRAY = 2;
    const COLORSPACE_TRANSPARENT = 3;
    const COLORSPACE_OHTA = 4;
    const COLORSPACE_LAB = 14;
    const COLORSPACE_XYZ = 5;
    const COLORSPACE_YCBCR = 17;
    const COLORSPACE_YCC = 6;
    const COLORSPACE_YIQ = 7;
    const COLORSPACE_YPBPR = 8;
    const COLORSPACE_YUV = 9;
    const COLORSPACE_CMYK = 10;
    const COLORSPACE_SRGB = 11;
    const COLORSPACE_HSL = 12;
    const COLORSPACE_HWB = 13;
    const VIRTUALPIXELMETHOD_UNDEFINED = 0;
    const VIRTUALPIXELMETHOD_CONSTANT = 1;
    const VIRTUALPIXELMETHOD_EDGE = 2;
    const VIRTUALPIXELMETHOD_MIRROR = 3;
    const VIRTUALPIXELMETHOD_TILE = 4;
    const PREVIEW_UNDEFINED = 0;
    const PREVIEW_ROTATE = 1;
    const PREVIEW_SHEAR = 2;
    const PREVIEW_ROLL = 3;
    const PREVIEW_HUE = 4;
    const PREVIEW_SATURATION = 5;
    const PREVIEW_BRIGHTNESS = 6;
    const PREVIEW_GAMMA = 7;
    const PREVIEW_SPIFF = 8;
    const PREVIEW_DULL = 9;
    const PREVIEW_GRAYSCALE = 10;
    const PREVIEW_QUANTIZE = 11;
    const PREVIEW_DESPECKLE = 12;
    const PREVIEW_REDUCENOISE = 13;
    const PREVIEW_ADDNOISE = 14;
    const PREVIEW_SHARPEN = 15;
    const PREVIEW_BLUR = 16;
    const PREVIEW_THRESHOLD = 17;
    const PREVIEW_EDGEDETECT = 18;
    const PREVIEW_SPREAD = 19;
    const PREVIEW_SOLARIZE = 20;
    const PREVIEW_SHADE = 21;
    const PREVIEW_RAISE = 22;
    const PREVIEW_SEGMENT = 23;
    const PREVIEW_SWIRL = 24;
    const PREVIEW_IMPLODE = 25;
    const PREVIEW_WAVE = 26;
    const PREVIEW_OILPAINT = 27;
    const PREVIEW_CHARCOALDRAWING = 28;
    const PREVIEW_JPEG = 29;
    const RENDERINGINTENT_UNDEFINED = 0;
    const RENDERINGINTENT_SATURATION = 1;
    const RENDERINGINTENT_PERCEPTUAL = 2;
    const RENDERINGINTENT_ABSOLUTE = 3;
    const RENDERINGINTENT_RELATIVE = 4;
    const FILLRULE_UNDEFINED = 0;
    const FILLRULE_EVENODD = 1;
    const FILLRULE_NONZERO = 2;
    const PATHUNITS_USERSPACE = 0;
    const PATHUNITS_USERSPACEONUSE = 1;
    const PATHUNITS_OBJECTBOUNDINGBOX = 2;
    const LINECAP_UNDEFINED = 0;
    const LINECAP_BUTT = 1;
    const LINECAP_ROUND = 2;
    const LINECAP_SQUARE = 3;
    const LINEJOIN_UNDEFINED = 0;
    const LINEJOIN_MITER = 1;
    const LINEJOIN_ROUND = 2;
    const LINEJOIN_BEVEL = 3;
    const RESOURCETYPE_UNDEFINED = 0;
    const RESOURCETYPE_AREA = 0;
    const RESOURCETYPE_DISK = 1;
    const RESOURCETYPE_FILE = 2;
    const RESOURCETYPE_MAP = 3;
    const RESOURCETYPE_MEMORY = 4;
    const DISPOSE_UNDEFINED = 0;
    const DISPOSE_NONE = 1;
    const DISPOSE_BACKGROUND = 2;
    const DISPOSE_PREVIOUS = 3;
    const QUANTUM_DEPTH = 16;
    const QUANTUM = 131071;
    const VERSION_TXT = '1.3.35';
    const VERSION_LIB = 2367744;
    const VERSION_NUM = 1003035;

    // methods
    public function __construct(?string $filename = null) {}
    public function __toString() : string {}
    public function readimage(string $filename) : \Gmagick {}
    public function read(string $filename) : \Gmagick {}
    public function readimagefile($filehandle, ?string $filename = null) : \Gmagick {}
    public function writeimage(string $filename, bool $all_frames = unknown) : \Gmagick {}
    public function write(string $filename, bool $all_frames = unknown) : \Gmagick {}
    public function writeimagefile($filehandle, ?string $format = null) : \Gmagick {}
    public static function getversion() : array {}
    public function annotateimage(\GmagickDraw $drawing_wand, float $x, float $y, float $angle, string $text) : \Gmagick {}
    public function blurimage(float $radius, float $sigma) : \Gmagick {}
    public function setcompressionquality(int $quality) : \Gmagick {}
    public function setimagepage(int $width, int $height, int $x, int $y) : bool {}
    public function getimagepage() : array {}
    public function thumbnailimage(int $width, int $height, bool $fit = unknown, bool $legacy = unknown) : \Gmagick {}
    public function resizeimage(int $width, int $height, int $filter, float $blur, bool $fit = unknown, bool $legacy = unknown) : \Gmagick {}
    public function clear() : \Gmagick {}
    public function cropimage(int $width, int $height, int $x, int $y) : \Gmagick {}
    public function cropthumbnailimage(int $width, int $height) : \Gmagick {}
    public function coalesceimages() : \Gmagick {}
    public function compositeimage(\Gmagick $source, int $COMPOSE, int $x, int $y) : \Gmagick {}
    public function addimage(\Gmagick $source) : \Gmagick {}
    public function addnoiseimage(int $noise_type) : \Gmagick {}
    public function borderimage($color, int $width, int $height) : \Gmagick {}
    public function thresholdimage(float $threshold, int $channel = unknown) : bool {}
    public function charcoalimage(float $radius, float $sigma) : \Gmagick {}
    public function chopimage(int $width, int $height, int $x, int $y) : \Gmagick {}
    public function commentimage(string $comment) : \Gmagick {}
    public function current() : \Gmagick {}
    public function cyclecolormapimage(int $displace) : \Gmagick {}
    public function deconstructimages() : \Gmagick {}
    public function despeckleimage() : \Gmagick {}
    public function destroy() : bool {}
    public function drawimage(\GmagickDraw $drawing_wand) : \Gmagick {}
    public function edgeimage(float $radius) : \Gmagick {}
    public function embossimage(float $radius, float $sigma) : \Gmagick {}
    public function enhanceimage() : \Gmagick {}
    public function equalizeimage() : \Gmagick {}
    public function flipimage() : \Gmagick {}
    public function flopimage() : \Gmagick {}
    public function frameimage($color, int $width, int $height, int $inner_bevel, int $outer_bevel) : \Gmagick {}
    public function gammaimage(float $gamma) : \Gmagick {}
    public function getcopyright() : string {}
    public function getfilename() : string {}
    public function getimage() : \Gmagick {}
    public function setimage(\Gmagick $replace) : bool {}
    public function getimagebackgroundcolor() : \gmagickpixel {}
    public function getimageblob() : string {}
    public function getimagesblob() : string {}
    public function getimageblueprimary() : array {}
    public function getimagebordercolor() : \gmagickpixel {}
    public function getimagechanneldepth(int $channel_type) : int {}
    public function getimagecolors() : int {}
    public function getimagecolorspace() : int {}
    public function getimagecompose() : int {}
    public function getimagedelay() : int {}
    public function getimagedepth() : int {}
    public function getnumberimages() : int {}
    public function getimagedispose() : int {}
    public function getimageextrema() : array {}
    public function getimagefilename() : string {}
    public function getimagegamma() : float {}
    public function getimagegreenprimary() : array {}
    public function getimageheight() : int {}
    public function getimagehistogram() : array {}
    public function getimageindex() : int {}
    public function getimageinterlacescheme() : int {}
    public function getimageiterations() : int {}
    public function getimagemattecolor() : \gmagickpixel {}
    public function getimageprofile(string $name) : string {}
    public function getimageredprimary() : array {}
    public function getimagerenderingintent() : int {}
    public function getimageresolution() : array {}
    public function getimagescene() : int {}
    public function getimagesignature() : string {}
    public function getimagetype() : int {}
    public function getimageunits() : int {}
    public function getimagewhitepoint() : array {}
    public function getimagewidth() : int {}
    public function getpackagename() : string {}
    public function getquantumdepth() : array {}
    public function getreleasedate() : string {}
    public function getsamplingfactors() : array {}
    public function getsize() : array {}
    public function setinterlacescheme(int $interlace_scheme) : \Gmagick {}
    public function hasnextimage() : \Gmagick {}
    public function haspreviousimage() : \Gmagick {}
    public function implodeimage(float $radius) : \Gmagick {}
    public function labelimage(string $label) : \Gmagick {}
    public function levelimage(float $blackPoint, float $gamma, float $whitePoint, int $channel = unknown) : \Gmagick {}
    public function magnifyimage() : \Gmagick {}
    public function mapimage(\Gmagick $gmagick, bool $dither) : \Gmagick {}
    public function medianfilterimage(float $radius) : void {}
    public function minifyimage() : \Gmagick {}
    public function modulateimage(float $brightness, float $saturation, float $hue) : \Gmagick {}
    public function motionblurimage(float $radius, float $sigma, float $angle) : \Gmagick {}
    public function newimage(int $width, int $height, string $background, ?string $format = null) : \Gmagick {}
    public function nextimage() : bool {}
    public function normalizeimage() : \Gmagick {}
    public function oilpaintimage(float $radius) : \Gmagick {}
    public function previousimage() : bool {}
    public function profileimage(string $name, string $profile) : \Gmagick {}
    public function quantizeimage(int $numColors, int $colorspace, int $treeDepth, bool $dither, bool $measureError) : \Gmagick {}
    public function quantizeimages(int $numColors, int $colorspace, int $treeDepth, bool $dither, bool $measureError) : \Gmagick {}
    public function queryfontmetrics(\GmagickDraw $draw, string $text) : array {}
    public function queryfonts(string $pattern = unknown) : array {}
    public function queryformats(string $pattern = unknown) : array {}
    public function radialblurimage(float $angle, int $channel = unknown) : \Gmagick {}
    public function raiseimage(int $width, int $height, int $x, int $y, bool $raise) : \Gmagick {}
    public function readimageblob(string $imageContents, ?string $filename = null) : \Gmagick {}
    public function reducenoiseimage(float $radius) : \Gmagick {}
    public function removeimage() : \Gmagick {}
    public function removeimageprofile(string $name) : string {}
    public function resampleimage(float $xResolution, float $yResolution, int $filter, float $blur) : \Gmagick {}
    public function rollimage(int $x, int $y) : \Gmagick {}
    public function rotateimage($background, float $degrees) : \Gmagick {}
    public function scaleimage(int $width, int $height, bool $fit = unknown) : \Gmagick {}
    public function separateimagechannel(int $channel) : \Gmagick {}
    public function setfilename(string $filename) : \Gmagick {}
    public function setimagebackgroundcolor($color) : \Gmagick {}
    public function setimageblueprimary(float $x, float $y) : \Gmagick {}
    public function setimagebordercolor($color) : \Gmagick {}
    public function setimagechanneldepth(int $channel, int $depth) : \Gmagick {}
    public function setimagecolorspace(int $colorspace) : \Gmagick {}
    public function setimagecompose(int $composite) : \Gmagick {}
    public function getimagecompression() : int {}
    public function setimagecompression(int $compression) : \Gmagick {}
    public function setimagedelay(int $delay) : \Gmagick {}
    public function setimagedepth(int $depth) : \Gmagick {}
    public function setimagedispose(int $disposeType) : \Gmagick {}
    public function setimagefilename(string $filename) : \Gmagick {}
    public function getimageformat() : string {}
    public function setimageformat(string $imageFormat) : \Gmagick {}
    public function setimagegamma(float $gamma) : \Gmagick {}
    public function setimagegreenprimary(float $x, float $y) : \Gmagick {}
    public function setimageindex(int $index) : \Gmagick {}
    public function setimageinterlacescheme(int $interlace) : \Gmagick {}
    public function setimageiterations(int $iterations) : \Gmagick {}
    public function setimageprofile(string $name, string $profile) : \Gmagick {}
    public function setimageredprimary(float $x, float $y) : \Gmagick {}
    public function setimagerenderingintent(int $rendering_intent) : \Gmagick {}
    public function setimageresolution(float $xResolution, float $yResolution) : \Gmagick {}
    public function setimagescene(int $scene) : \Gmagick {}
    public function setimagetype(int $imgType) : \Gmagick {}
    public function setimageunits(int $resolution) : \Gmagick {}
    public function setimagewhitepoint(float $x, float $y) : \Gmagick {}
    public function setsamplingfactors(array $factors) : \Gmagick {}
    public function setsize(int $columns, int $rows) : \Gmagick {}
    public function shearimage($background, float $xShear, float $yShear) : \Gmagick {}
    public function solarizeimage(int $threshold) : \Gmagick {}
    public function spreadimage(float $radius) : \Gmagick {}
    public function stripimage() : \Gmagick {}
    public function swirlimage(float $degrees) : \Gmagick {}
    public function trimimage(float $fuzz) : \Gmagick {}
    public function blackthresholdimage($threshold) : bool {}
    public function whitethresholdimage($threshold) : bool {}
    public function colordecisionlist(string $color_correction_collection) : bool {}
    public function clipimage() : bool {}
    public function clippathimage(string $pathname, bool $inside) : bool {}
    public function colorfloodfillimage($fill, float $fuzz, $bordercolor, int $x, int $y) : bool {}
    public function colorizeimage($colorize, $opacity) : bool {}
    public function compareimagechannels(\Gmagick $reference, int $channel, int $metric) : array {}
    public function compareimages(\Gmagick $reference, int $metric) : array {}
    public function contrastimage(bool $sharpen) : bool {}
    public function convolveimage(array $kernel) : bool {}
    public function extentimage(int $width, int $height, int $x, int $y) : bool {}
    public function getimageboundingbox(float $fuzz) : array {}
    public function getimageattribute(string $key) : string {}
    public function setimageattribute(string $key, string $attribute) : bool {}
    public function getimagechannelextrema(int $channel) : array {}
    public function getimagechannelmean(int $channel) : array {}
    public function getimagecolormapcolor(int $index) : \gmagickpixel {}
    public function setimagecolormapcolor(int $index, $color) : bool {}
    public function getimagegravity() : int {}
    public function setimagegravity(int $gravity) : bool {}
    public function setimagemattecolor($color) : bool {}
    public function getimagevirtualpixelmethod() : int {}
    public function setimagevirtualpixelmethod(int $method) : bool {}
    public function haldclutimage(\Gmagick $hald) : bool {}
    public function mattefloodfillimage(float $alpha, float $fuzz, $bordercolor, int $x, int $y) : bool {}
    public function montageimage(\GmagickDraw $drawing_wand, string $tile_geometry, string $thumbnail_geometry, int $mode, string $frame) : \Gmagick {}
    public function morphimages(int $frames) : \Gmagick {}
    public function mosaicimages() : \Gmagick {}
    public function shaveimage(int $columns, int $rows) : bool {}
    public function steganoimage(\Gmagick $watermark_wand, int $offset) : \Gmagick {}
    public function stereoimage(\Gmagick $object_wand) : \Gmagick {}
    public function transformimage(string $crop, string $geometry) : \Gmagick {}
    public function waveimage(float $amplitude, float $length) : bool {}
    public function getimagefuzz() : float {}
    public function setimagefuzz(float $fuzz) : \Gmagick {}
    public function getimagesavedtype() : int {}
    public function setdepth(int $depth) : \Gmagick {}
    public function setimageoption(string $format, string $key, string $value) : bool {}
    public function setimagesavedtype(int $type) : bool {}
    public function setformat(string $format) : bool {}
    public function setresolutionunits(int $resolution_type) : bool {}
    public function getimagegeometry() : array {}
    public function getresourcelimit(int $type) : int {}
    public function setresourcelimit(int $type, int $limit) : bool {}
    public function negateimage(bool $gray, int $channel = unknown) : bool {}
    public function sharpenimage(float $radius, float $sigma) : bool {}
    public function textureimage(\Gmagick $texture_wand) : \Gmagick {}
    public function flattenimages() : \Gmagick {}
    public function sampleimage(int $cols, int $rows, bool $fit = unknown, bool $legacy = unknown) : \Gmagick {}
    public function cloneimage() : \Gmagick {}
    public function appendimages() : \Gmagick {}
    public function unsharpmaskimage(float $radius, float $sigma, float $amount, float $threshold) : \Gmagick {}
    public function setresolution(float $x_resolution, float $y_resolution, float $amount, float $threshold) : bool {}
    public function adaptivethresholdimage(int $width, int $height, int $offset) : bool {}
    public function affinetransformimage(\GmagickDraw $drawing_wand) : bool {}
    public function averageimages() : \Gmagick {}
}

class GmagickDraw {

    // methods
    public function setstrokecolor($color) : \GmagickDraw {}
    public function setstrokewidth(float $width) : \GmagickDraw {}
    public function ellipse(float $ox, float $oy, float $rx, float $ry, float $start, float $end) : \GmagickDraw {}
    public function annotate(float $x, float $y, string $text) : \GmagickDraw {}
    public function affine(array $affine) : bool {}
    public function arc(float $sx, float $sy, float $ex, float $ey, float $sd, float $ed) : \GmagickDraw {}
    public function bezier(array $coordinates) : \GmagickDraw {}
    public function getfillcolor() : \gmagickpixel {}
    public function getfillopacity() : float {}
    public function getfont() {}
    public function getfontfamily() {}
    public function setfontfamily(string $font_family) : \GmagickDraw {}
    public function getfontsize() : float {}
    public function getfontstyle() : int {}
    public function getfontweight() : int {}
    public function getstrokeopacity() : float {}
    public function getstrokecolor() : \gmagickpixel {}
    public function getstrokewidth() : float {}
    public function gettextdecoration() : int {}
    public function gettextencoding() {}
    public function line(float $sx, float $sy, float $ex, float $ey) : \GmagickDraw {}
    public function point(float $x, float $y) : \GmagickDraw {}
    public function polygon(array $coordinates) : \GmagickDraw {}
    public function polyline(array $coordinates) : \GmagickDraw {}
    public function rectangle(float $x1, float $y1, float $x2, float $y2) : \GmagickDraw {}
    public function rotate(float $degrees) : \GmagickDraw {}
    public function roundrectangle(float $x1, float $y1, float $x2, float $y2, float $rx, float $ry) : \GmagickDraw {}
    public function scale(float $x, float $y) : \GmagickDraw {}
    public function setfillcolor($color) : \GmagickDraw {}
    public function setfillopacity(float $fill_opacity) : \GmagickDraw {}
    public function setfont(string $font) : \GmagickDraw {}
    public function setfontsize(float $pointsize) : \GmagickDraw {}
    public function setfontstyle(int $style) : \GmagickDraw {}
    public function setfontweight(int $weight) : \GmagickDraw {}
    public function setstrokeopacity(float $stroke_opacity) : \GmagickDraw {}
    public function settextdecoration(int $decoration) : \GmagickDraw {}
    public function settextencoding(string $encoding) : \GmagickDraw {}
    public function getgravity() : int {}
    public function setgravity(int $gravity) : \GmagickDraw {}
    public function getstrokeantialias() : bool {}
    public function setstrokeantialias(bool $antialias) : \GmagickDraw {}
    public function getstrokedashoffset() : float {}
    public function setstrokedashoffset(float $offset) : \GmagickDraw {}
    public function getstrokelinecap() : int {}
    public function setstrokelinecap(int $linecap) : \GmagickDraw {}
    public function getstrokelinejoin() : int {}
    public function setstrokelinejoin(int $linejoin) : \GmagickDraw {}
    public function getstrokemiterlimit() : int {}
    public function setstrokemiterlimit(int $miterlimit) : \GmagickDraw {}
    public function getstrokedasharray() : array {}
    public function setstrokedasharray(array $dash_array) : \GmagickDraw {}
    public function circle(float $ox, float $oy, float $px, float $py) : \GmagickDraw {}
    public function getclippath() {}
    public function setclippath(string $clip_mask) : \GmagickDraw {}
    public function getcliprule() : int {}
    public function setcliprule(int $fill_rule) : \GmagickDraw {}
    public function getclipunits() : int {}
    public function setclipunits(int $clip_units) : \GmagickDraw {}
    public function color(float $x, float $y, int $paint_method) : \GmagickDraw {}
    public function comment(string $comment) : \GmagickDraw {}
    public function setfillpatternurl(string $fill_url) : \GmagickDraw {}
    public function getfillrule() : int {}
    public function setfillrule(string $fill_rule) : \GmagickDraw {}
    public function getfontstretch() : int {}
    public function setfontstretch(int $font_stretch) : bool {}
    public function pathclose() : \GmagickDraw {}
    public function pathcurvetoabsolute(float $x1, float $y1, float $x2, float $y2, float $x, float $y) : \GmagickDraw {}
    public function pathcurvetorelative(float $x1, float $y1, float $x2, float $y2, float $x, float $y) : \GmagickDraw {}
    public function pathcurvetoquadraticbezierabsolute(float $x1, float $y1, float $x, float $y) : \GmagickDraw {}
    public function pathcurvetoquadraticbezierrelative(float $x1, float $y1, float $x, float $y) : \GmagickDraw {}
    public function pathcurvetoquadraticbeziersmoothabsolute(float $x, float $y) : \GmagickDraw {}
    public function pathcurvetoquadraticbeziersmoothrelative(float $x, float $y) : \GmagickDraw {}
    public function pathcurvetosmoothabsolute(float $x1, float $y1, float $x, float $y) : \GmagickDraw {}
    public function pathcurvetosmoothrelative(float $x1, float $y1, float $x, float $y) : \GmagickDraw {}
    public function pathellipticarcabsolute(float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag, float $x, float $y) : \GmagickDraw {}
    public function pathellipticarcrelative(float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag, float $x, float $y) : \GmagickDraw {}
    public function pathmovetoabsolute(float $x, float $y) : \GmagickDraw {}
    public function pathmovetorelative(float $x, float $y) : \GmagickDraw {}
    public function pathlinetoabsolute(float $x, float $y) : \GmagickDraw {}
    public function pathlinetorelative(float $x, float $y) : \GmagickDraw {}
    public function pathlinetohorizontalabsolute(float $x) : \GmagickDraw {}
    public function pathlinetohorizontalrelative(float $x) : \GmagickDraw {}
    public function pathlinetoverticalabsolute(float $y) : \GmagickDraw {}
    public function pathlinetoverticalrelative(float $y) : \GmagickDraw {}
    public function pathstart() : \GmagickDraw {}
    public function pathfinish() : \GmagickDraw {}
    public function popclippath() : \GmagickDraw {}
    public function popdefs() : \GmagickDraw {}
    public function pushdefs() : \GmagickDraw {}
    public function poppattern() : \GmagickDraw {}
    public function pushpattern(string $pattern_id, float $x, float $y, float $width, float $height) : \GmagickDraw {}
    public function pushclippath(string $clip_mask_id) : \GmagickDraw {}
    public function skewx(float $degrees) : \GmagickDraw {}
    public function skewy(float $degrees) : \GmagickDraw {}
    public function setstrokepatternurl(string $stroke_url) : \GmagickDraw {}
    public function gettextantialias() : bool {}
    public function settextantialias(bool $anti_alias) : bool {}
    public function gettextundercolor() : \gmagickpixel {}
    public function settextundercolor($color) : \GmagickDraw {}
    public function translate(float $x, float $y) : \GmagickDraw {}
    public function setviewbox(float $x1, float $y1, float $x2, float $y2) : \GmagickDraw {}
    public function popGraphicContext() : \GmagickDraw {}
    public function pushGraphicContext() : \GmagickDraw {}
}

final class GmagickException extends \Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class GmagickPixel {

    // methods
    public function __construct(?string $color = null) {}
    public function getcolor(bool $as_array = unknown, bool $normalize_array = unknown) {}
    public function setcolor(string $color) : \gmagickpixel {}
    public function getcolorcount() : int {}
    public function setcolorcount(int $color_count) : \gmagickpixel {}
    public function getcolorvalue(int $color) : float {}
    public function setcolorvalue(int $color, float $value) : \gmagickpixel {}
    public function getcolorvaluequantum(int $color) : int {}
    public function setcolorvaluequantum(int $color, float $value) : \gmagickpixel {}
}

final class GmagickPixelException extends \Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

}
