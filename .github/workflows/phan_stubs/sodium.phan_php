<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension sodium@7.4.12

namespace {
class SodiumException extends \Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

function sodium_add(&$string_1, $string_2) {}
function sodium_base642bin($string_1, $id, $string_2 = null) {}
function sodium_bin2base64($string, $id) {}
function sodium_bin2hex($string) {}
function sodium_compare($string_1, $string_2) {}
function sodium_crypto_aead_aes256gcm_decrypt($string, $ad, $nonce, $key) {}
function sodium_crypto_aead_aes256gcm_encrypt($string, $ad, $nonce, $key) {}
function sodium_crypto_aead_aes256gcm_is_available() {}
function sodium_crypto_aead_aes256gcm_keygen() {}
function sodium_crypto_aead_chacha20poly1305_decrypt($string, $ad, $nonce, $key) {}
function sodium_crypto_aead_chacha20poly1305_encrypt($string, $ad, $nonce, $key) {}
function sodium_crypto_aead_chacha20poly1305_ietf_decrypt($string, $ad, $nonce, $key) {}
function sodium_crypto_aead_chacha20poly1305_ietf_encrypt($string, $ad, $nonce, $key) {}
function sodium_crypto_aead_chacha20poly1305_ietf_keygen() {}
function sodium_crypto_aead_chacha20poly1305_keygen() {}
function sodium_crypto_aead_xchacha20poly1305_ietf_decrypt($string, $ad, $nonce, $key) {}
function sodium_crypto_aead_xchacha20poly1305_ietf_encrypt($string, $ad, $nonce, $key) {}
function sodium_crypto_aead_xchacha20poly1305_ietf_keygen() {}
function sodium_crypto_auth($string, $key) {}
function sodium_crypto_auth_keygen() {}
function sodium_crypto_auth_verify($signature, $string, $key) {}
function sodium_crypto_box($string, $nonce, $key) {}
function sodium_crypto_box_keypair() {}
function sodium_crypto_box_keypair_from_secretkey_and_publickey($secret_key, $public_key) {}
function sodium_crypto_box_open($string, $nonce, $key) {}
function sodium_crypto_box_publickey($key) {}
function sodium_crypto_box_publickey_from_secretkey($key) {}
function sodium_crypto_box_seal($string, $key) {}
function sodium_crypto_box_seal_open($string, $key) {}
function sodium_crypto_box_secretkey($key) {}
function sodium_crypto_box_seed_keypair($key) {}
function sodium_crypto_generichash($string, $key = null, $length = null) {}
function sodium_crypto_generichash_final(&$state, $length = null) {}
function sodium_crypto_generichash_init($key = null, $length = null) {}
function sodium_crypto_generichash_keygen() {}
function sodium_crypto_generichash_update(&$state, $string) {}
function sodium_crypto_kdf_derive_from_key($subkey_len, $subkey_id, $context, $key) {}
function sodium_crypto_kdf_keygen() {}
function sodium_crypto_kx_client_session_keys($client_keypair, $server_key) {}
function sodium_crypto_kx_keypair() {}
function sodium_crypto_kx_publickey($key) {}
function sodium_crypto_kx_secretkey($key) {}
function sodium_crypto_kx_seed_keypair($string) {}
function sodium_crypto_kx_server_session_keys($server_keypair, $client_key) {}
function sodium_crypto_pwhash($length, $password, $salt, $opslimit, $memlimit, $alg = null) {}
function sodium_crypto_pwhash_scryptsalsa208sha256($length, $password, $salt, $opslimit, $memlimit, $alg = null) {}
function sodium_crypto_pwhash_scryptsalsa208sha256_str($password, $opslimit, $memlimit) {}
function sodium_crypto_pwhash_scryptsalsa208sha256_str_verify($hash, $password) {}
function sodium_crypto_pwhash_str($password, $opslimit, $memlimit) {}
function sodium_crypto_pwhash_str_needs_rehash($password, $opslimit, $memlimit) {}
function sodium_crypto_pwhash_str_verify($hash, $password) {}
function sodium_crypto_scalarmult($string_1, $string_2) {}
function sodium_crypto_scalarmult_base($string_1, $string_2) {}
function sodium_crypto_secretbox($string, $nonce, $key) {}
function sodium_crypto_secretbox_keygen() {}
function sodium_crypto_secretbox_open($string, $nonce, $key) {}
function sodium_crypto_secretstream_xchacha20poly1305_init_pull($string, $key) {}
function sodium_crypto_secretstream_xchacha20poly1305_init_push($key) {}
function sodium_crypto_secretstream_xchacha20poly1305_keygen() {}
function sodium_crypto_secretstream_xchacha20poly1305_pull(&$state, $string, $string = null) {}
function sodium_crypto_secretstream_xchacha20poly1305_push(&$state, $string, $string = null, $long = null) {}
function sodium_crypto_secretstream_xchacha20poly1305_rekey(&$state) {}
function sodium_crypto_shorthash($string, $key) {}
function sodium_crypto_shorthash_keygen() {}
function sodium_crypto_sign($string, $keypair) {}
function sodium_crypto_sign_detached($string, $keypair) {}
function sodium_crypto_sign_ed25519_pk_to_curve25519($key) {}
function sodium_crypto_sign_ed25519_sk_to_curve25519($key) {}
function sodium_crypto_sign_keypair() {}
function sodium_crypto_sign_keypair_from_secretkey_and_publickey($secret_key, $public_key) {}
function sodium_crypto_sign_open($string, $keypair) {}
function sodium_crypto_sign_publickey($key) {}
function sodium_crypto_sign_publickey_from_secretkey($key) {}
function sodium_crypto_sign_secretkey($key) {}
function sodium_crypto_sign_seed_keypair($key) {}
function sodium_crypto_sign_verify_detached($signature, $string, $key) {}
function sodium_crypto_stream($length, $nonce, $key) {}
function sodium_crypto_stream_keygen() {}
function sodium_crypto_stream_xor($string, $nonce, $key) {}
function sodium_hex2bin($string_1, $string_2 = null) {}
function sodium_increment(&$string) {}
function sodium_memcmp($string_1, $string_2) {}
function sodium_memzero(&$reference) {}
function sodium_pad($string, $length) {}
function sodium_unpad($string, $length) {}
const SODIUM_BASE64_VARIANT_ORIGINAL = 1;
const SODIUM_BASE64_VARIANT_ORIGINAL_NO_PADDING = 3;
const SODIUM_BASE64_VARIANT_URLSAFE = 5;
const SODIUM_BASE64_VARIANT_URLSAFE_NO_PADDING = 7;
const SODIUM_CRYPTO_AEAD_AES256GCM_ABYTES = 16;
const SODIUM_CRYPTO_AEAD_AES256GCM_KEYBYTES = 32;
const SODIUM_CRYPTO_AEAD_AES256GCM_NPUBBYTES = 12;
const SODIUM_CRYPTO_AEAD_AES256GCM_NSECBYTES = 0;
const SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_ABYTES = 16;
const SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_ABYTES = 16;
const SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_KEYBYTES = 32;
const SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NPUBBYTES = 12;
const SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NSECBYTES = 0;
const SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_KEYBYTES = 32;
const SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_NPUBBYTES = 8;
const SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_NSECBYTES = 0;
const SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_ABYTES = 16;
const SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_KEYBYTES = 32;
const SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_NPUBBYTES = 24;
const SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_NSECBYTES = 0;
const SODIUM_CRYPTO_AUTH_BYTES = 32;
const SODIUM_CRYPTO_AUTH_KEYBYTES = 32;
const SODIUM_CRYPTO_BOX_KEYPAIRBYTES = 64;
const SODIUM_CRYPTO_BOX_MACBYTES = 16;
const SODIUM_CRYPTO_BOX_NONCEBYTES = 24;
const SODIUM_CRYPTO_BOX_PUBLICKEYBYTES = 32;
const SODIUM_CRYPTO_BOX_SEALBYTES = 48;
const SODIUM_CRYPTO_BOX_SECRETKEYBYTES = 32;
const SODIUM_CRYPTO_BOX_SEEDBYTES = 32;
const SODIUM_CRYPTO_GENERICHASH_BYTES = 32;
const SODIUM_CRYPTO_GENERICHASH_BYTES_MAX = 64;
const SODIUM_CRYPTO_GENERICHASH_BYTES_MIN = 16;
const SODIUM_CRYPTO_GENERICHASH_KEYBYTES = 32;
const SODIUM_CRYPTO_GENERICHASH_KEYBYTES_MAX = 64;
const SODIUM_CRYPTO_GENERICHASH_KEYBYTES_MIN = 16;
const SODIUM_CRYPTO_KDF_BYTES_MAX = 64;
const SODIUM_CRYPTO_KDF_BYTES_MIN = 16;
const SODIUM_CRYPTO_KDF_CONTEXTBYTES = 8;
const SODIUM_CRYPTO_KDF_KEYBYTES = 32;
const SODIUM_CRYPTO_KX_KEYPAIRBYTES = 64;
const SODIUM_CRYPTO_KX_PUBLICKEYBYTES = 32;
const SODIUM_CRYPTO_KX_SECRETKEYBYTES = 32;
const SODIUM_CRYPTO_KX_SEEDBYTES = 32;
const SODIUM_CRYPTO_KX_SESSIONKEYBYTES = 32;
const SODIUM_CRYPTO_PWHASH_ALG_ARGON2I13 = 1;
const SODIUM_CRYPTO_PWHASH_ALG_ARGON2ID13 = 2;
const SODIUM_CRYPTO_PWHASH_ALG_DEFAULT = 2;
const SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE = 67108864;
const SODIUM_CRYPTO_PWHASH_MEMLIMIT_MODERATE = 268435456;
const SODIUM_CRYPTO_PWHASH_MEMLIMIT_SENSITIVE = 1073741824;
const SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE = 2;
const SODIUM_CRYPTO_PWHASH_OPSLIMIT_MODERATE = 3;
const SODIUM_CRYPTO_PWHASH_OPSLIMIT_SENSITIVE = 4;
const SODIUM_CRYPTO_PWHASH_SALTBYTES = 16;
const SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_INTERACTIVE = 16777216;
const SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_SENSITIVE = 1073741824;
const SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_INTERACTIVE = 524288;
const SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_SENSITIVE = 33554432;
const SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_SALTBYTES = 32;
const SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_STRPREFIX = '$7$';
const SODIUM_CRYPTO_PWHASH_STRPREFIX = '$argon2id$';
const SODIUM_CRYPTO_SCALARMULT_BYTES = 32;
const SODIUM_CRYPTO_SCALARMULT_SCALARBYTES = 32;
const SODIUM_CRYPTO_SECRETBOX_KEYBYTES = 32;
const SODIUM_CRYPTO_SECRETBOX_MACBYTES = 16;
const SODIUM_CRYPTO_SECRETBOX_NONCEBYTES = 24;
const SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES = 17;
const SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES = 24;
const SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_KEYBYTES = 32;
const SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_MESSAGEBYTES_MAX = 274877906816;
const SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_FINAL = 3;
const SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_MESSAGE = 0;
const SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_PUSH = 1;
const SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_REKEY = 2;
const SODIUM_CRYPTO_SHORTHASH_BYTES = 8;
const SODIUM_CRYPTO_SHORTHASH_KEYBYTES = 16;
const SODIUM_CRYPTO_SIGN_BYTES = 64;
const SODIUM_CRYPTO_SIGN_KEYPAIRBYTES = 96;
const SODIUM_CRYPTO_SIGN_PUBLICKEYBYTES = 32;
const SODIUM_CRYPTO_SIGN_SECRETKEYBYTES = 64;
const SODIUM_CRYPTO_SIGN_SEEDBYTES = 32;
const SODIUM_CRYPTO_STREAM_KEYBYTES = 32;
const SODIUM_CRYPTO_STREAM_NONCEBYTES = 24;
const SODIUM_LIBRARY_MAJOR_VERSION = 10;
const SODIUM_LIBRARY_MINOR_VERSION = 2;
const SODIUM_LIBRARY_VERSION = '1.0.17';
}
