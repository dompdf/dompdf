<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension dom@20031129

namespace {
class DOMAttr extends \DOMNode {

    // properties
    public $name;
    public $ownerElement;
    public $schemaTypeInfo;
    public $specified;
    public $value;

    // methods
    public function isId() {}
    public function __construct($name, $value = null) {}
}

class DOMCdataSection extends \DOMText {

    // methods
    public function __construct($value) {}
}

class DOMCharacterData extends \DOMNode {

    // properties
    public $data;
    public $length;

    // methods
    public function substringData($offset, $count) {}
    public function appendData($arg) {}
    public function insertData($offset, $arg) {}
    public function deleteData($offset, $count) {}
    public function replaceData($offset, $count, $arg) {}
}

class DOMComment extends \DOMCharacterData {

    // methods
    public function __construct($value = null) {}
}

class DOMConfiguration {

    // methods
    public function setParameter($name, $value) {}
    public function getParameter($name = null) {}
    public function canSetParameter($name = null, $value = null) {}
}

class DOMDocument extends \DOMNode {

    // properties
    public $actualEncoding;
    public $config;
    public $doctype;
    public $documentElement;
    public $documentURI;
    public $encoding;
    public $formatOutput;
    public $implementation;
    public $preserveWhiteSpace;
    public $recover;
    public $resolveExternals;
    public $standalone;
    public $strictErrorChecking;
    public $substituteEntities;
    public $validateOnParse;
    public $version;
    public $xmlEncoding;
    public $xmlStandalone;
    public $xmlVersion;

    // methods
    public function createElement($tagName, $value = null) {}
    public function createDocumentFragment() {}
    public function createTextNode($data) {}
    public function createComment($data) {}
    public function createCDATASection($data) {}
    public function createProcessingInstruction($target, $data = null) {}
    public function createAttribute($name) {}
    public function createEntityReference($name) {}
    public function getElementsByTagName($tagName) {}
    public function importNode(\DOMNode $importedNode, $deep = null) {}
    public function createElementNS($namespaceURI, $qualifiedName, $value = null) {}
    public function createAttributeNS($namespaceURI, $qualifiedName) {}
    public function getElementsByTagNameNS($namespaceURI, $localName) {}
    public function getElementById($elementId) {}
    public function adoptNode(\DOMNode $source) {}
    public function normalizeDocument() {}
    public function renameNode(\DOMNode $node, $namespaceURI, $qualifiedName) {}
    public function load($source, $options = null) {}
    public function save($file) {}
    public function loadXML($source, $options = null) {}
    public function saveXML(?\DOMNode $node = null, $options = null) {}
    public function __construct($version = null, $encoding = null) {}
    public function validate() {}
    public function xinclude($options = null) {}
    public function loadHTML($source, $options = null) {}
    public function loadHTMLFile($source, $options = null) {}
    public function saveHTML() {}
    public function saveHTMLFile($file) {}
    public function schemaValidate($filename) {}
    public function schemaValidateSource($source) {}
    public function relaxNGValidate($filename) {}
    public function relaxNGValidateSource($source) {}
    public function registerNodeClass($baseClass, $extendedClass) {}
}

class DOMDocumentFragment extends \DOMNode {

    // properties
    public $name;

    // methods
    public function __construct() {}
    public function appendXML($data) {}
}

class DOMDocumentType extends \DOMNode {

    // properties
    public $entities;
    public $internalSubset;
    public $name;
    public $notations;
    public $publicId;
    public $systemId;
}

class DOMDomError {
}

class DOMElement extends \DOMNode {

    // properties
    public $schemaTypeInfo;
    public $tagName;

    // methods
    public function getAttribute($name) {}
    public function setAttribute($name, $value) {}
    public function removeAttribute($name) {}
    public function getAttributeNode($name) {}
    public function setAttributeNode(\DOMAttr $newAttr) {}
    public function removeAttributeNode(\DOMAttr $oldAttr) {}
    public function getElementsByTagName($name) {}
    public function getAttributeNS($namespaceURI, $localName) {}
    public function setAttributeNS($namespaceURI, $qualifiedName, $value) {}
    public function removeAttributeNS($namespaceURI, $localName) {}
    public function getAttributeNodeNS($namespaceURI, $localName) {}
    public function setAttributeNodeNS(\DOMAttr $newAttr) {}
    public function getElementsByTagNameNS($namespaceURI, $localName) {}
    public function hasAttribute($name) {}
    public function hasAttributeNS($namespaceURI, $localName) {}
    public function setIdAttribute($name, $isId) {}
    public function setIdAttributeNS($namespaceURI, $localName, $isId) {}
    public function setIdAttributeNode(\DOMAttr $attr, $isId) {}
    public function __construct($name, $value = null, $uri = null) {}
}

class DOMEntity extends \DOMNode {

    // properties
    public $actualEncoding;
    public $encoding;
    public $notationName;
    public $publicId;
    public $systemId;
    public $version;
}

class DOMEntityReference extends \DOMNode {

    // properties
    public $name;

    // methods
    public function __construct($name) {}
}

class DOMErrorHandler {

    // methods
    public function handleError(\DOMDomError $error) {}
}

final class DOMException extends \Exception {

    // properties
    public $code;
    protected $message;
    protected $file;
    protected $line;
}

class DOMImplementation {

    // properties
    public $name;

    // methods
    public function getFeature($feature, $version) {}
    public function hasFeature() {}
    public function createDocumentType($qualifiedName, $publicId, $systemId) {}
    public function createDocument($namespaceURI, $qualifiedName, \DOMDocumentType $docType = unknown) {}
}

class DOMImplementationList {

    // methods
    public function item($index) {}
}

class DOMImplementationSource {

    // methods
    public function getDomimplementation($features) {}
    public function getDomimplementations($features) {}
}

class DOMLocator {
}

class DOMNameList {

    // methods
    public function getName($index) {}
    public function getNamespaceURI($index) {}
}

class DOMNameSpaceNode {
}

class DOMNamedNodeMap implements \Traversable, \Countable {

    // properties
    public $length;

    // methods
    public function getNamedItem($name) {}
    public function setNamedItem(\DOMNode $arg) {}
    public function removeNamedItem($name = null) {}
    public function item($index = null) {}
    public function getNamedItemNS($namespaceURI = null, $localName = null) {}
    public function setNamedItemNS(\DOMNode $arg = unknown) {}
    public function removeNamedItemNS($namespaceURI = null, $localName = null) {}
    public function count() {}
}

class DOMNode {

    // properties
    public $attributes;
    public $baseURI;
    public $childNodes;
    public $firstChild;
    public $lastChild;
    public $localName;
    public $namespaceURI;
    public $nextSibling;
    public $nodeName;
    public $nodeType;
    public $nodeValue;
    public $ownerDocument;
    public $parentNode;
    public $prefix;
    public $previousSibling;
    public $textContent;

    // methods
    public function insertBefore(\DOMNode $newChild, ?\DOMNode $refChild = null) {}
    public function replaceChild(\DOMNode $newChild, \DOMNode $oldChild) {}
    public function removeChild(\DOMNode $oldChild) {}
    public function appendChild(\DOMNode $newChild) {}
    public function hasChildNodes() {}
    public function cloneNode($deep = null) {}
    public function normalize() {}
    public function isSupported($feature, $version) {}
    public function hasAttributes() {}
    public function compareDocumentPosition(\DOMNode $other) {}
    public function isSameNode(\DOMNode $other) {}
    public function lookupPrefix($namespaceURI) {}
    public function isDefaultNamespace($namespaceURI) {}
    public function lookupNamespaceUri($prefix) {}
    public function isEqualNode(\DOMNode $arg) {}
    public function getFeature($feature, $version) {}
    public function setUserData($key, $data, $handler) {}
    public function getUserData($key) {}
    public function getNodePath() {}
    public function getLineNo() {}
    public function C14N($exclusive = null, $with_comments = null, ?array $xpath = null, ?array $ns_prefixes = null) {}
    public function C14NFile($uri, $exclusive = null, $with_comments = null, ?array $xpath = null, ?array $ns_prefixes = null) {}
}

class DOMNodeList implements \Traversable, \Countable {

    // properties
    public $length;

    // methods
    public function item($index) {}
    public function count() {}
}

class DOMNotation extends \DOMNode {

    // properties
    public $publicId;
    public $systemId;
}

class DOMProcessingInstruction extends \DOMNode {

    // properties
    public $data;
    public $target;

    // methods
    public function __construct($name, $value = null) {}
}

class DOMStringExtend {

    // methods
    public function findOffset16($offset32) {}
    public function findOffset32($offset16) {}
}

class DOMStringList {

    // methods
    public function item($index) {}
}

class DOMText extends \DOMCharacterData {

    // properties
    public $wholeText;

    // methods
    public function splitText($offset) {}
    public function isWhitespaceInElementContent() {}
    public function isElementContentWhitespace() {}
    public function replaceWholeText($content) {}
    public function __construct($value = null) {}
}

class DOMTypeinfo {
}

class DOMUserDataHandler {

    // methods
    public function handle() {}
}

class DOMXPath {

    // properties
    public $document;

    // methods
    public function __construct(\DOMDocument $doc) {}
    public function registerNamespace($prefix, $uri) {}
    public function query($expr, ?\DOMNode $context = null, $registerNodeNS = null) {}
    public function evaluate($expr, ?\DOMNode $context = null, $registerNodeNS = null) {}
    public function registerPhpFunctions() {}
}

function dom_import_simplexml($node) {}
const DOMSTRING_SIZE_ERR = 2;
const DOM_HIERARCHY_REQUEST_ERR = 3;
const DOM_INDEX_SIZE_ERR = 1;
const DOM_INUSE_ATTRIBUTE_ERR = 10;
const DOM_INVALID_ACCESS_ERR = 15;
const DOM_INVALID_CHARACTER_ERR = 5;
const DOM_INVALID_MODIFICATION_ERR = 13;
const DOM_INVALID_STATE_ERR = 11;
const DOM_NAMESPACE_ERR = 14;
const DOM_NOT_FOUND_ERR = 8;
const DOM_NOT_SUPPORTED_ERR = 9;
const DOM_NO_DATA_ALLOWED_ERR = 6;
const DOM_NO_MODIFICATION_ALLOWED_ERR = 7;
const DOM_PHP_ERR = 0;
const DOM_SYNTAX_ERR = 12;
const DOM_VALIDATION_ERR = 16;
const DOM_WRONG_DOCUMENT_ERR = 4;
const XML_ATTRIBUTE_CDATA = 1;
const XML_ATTRIBUTE_DECL_NODE = 16;
const XML_ATTRIBUTE_ENTITY = 6;
const XML_ATTRIBUTE_ENUMERATION = 9;
const XML_ATTRIBUTE_ID = 2;
const XML_ATTRIBUTE_IDREF = 3;
const XML_ATTRIBUTE_IDREFS = 4;
const XML_ATTRIBUTE_NMTOKEN = 7;
const XML_ATTRIBUTE_NMTOKENS = 8;
const XML_ATTRIBUTE_NODE = 2;
const XML_ATTRIBUTE_NOTATION = 10;
const XML_CDATA_SECTION_NODE = 4;
const XML_COMMENT_NODE = 8;
const XML_DOCUMENT_FRAG_NODE = 11;
const XML_DOCUMENT_NODE = 9;
const XML_DOCUMENT_TYPE_NODE = 10;
const XML_DTD_NODE = 14;
const XML_ELEMENT_DECL_NODE = 15;
const XML_ELEMENT_NODE = 1;
const XML_ENTITY_DECL_NODE = 17;
const XML_ENTITY_NODE = 6;
const XML_ENTITY_REF_NODE = 5;
const XML_HTML_DOCUMENT_NODE = 13;
const XML_LOCAL_NAMESPACE = 18;
const XML_NAMESPACE_DECL_NODE = 18;
const XML_NOTATION_NODE = 12;
const XML_PI_NODE = 7;
const XML_TEXT_NODE = 3;
}
